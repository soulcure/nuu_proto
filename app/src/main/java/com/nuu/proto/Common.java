package com.nuu.proto;
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

public final class Common {
    private Common() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * Protobuf enum {@code NetworkType}
     */
    public enum NetworkType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * * Network type is unknown
         * </pre>
         *
         * <code>NETWORK_TYPE_UNKNOWN = 0;</code>
         */
        NETWORK_TYPE_UNKNOWN(0),
        /**
         * <pre>
         * * Current network is GPRS
         * </pre>
         *
         * <code>NETWORK_TYPE_GPRS = 1;</code>
         */
        NETWORK_TYPE_GPRS(1),
        /**
         * <pre>
         * * Current network is EDGE
         * </pre>
         *
         * <code>NETWORK_TYPE_EDGE = 2;</code>
         */
        NETWORK_TYPE_EDGE(2),
        /**
         * <pre>
         * * Current network is UMTS
         * </pre>
         *
         * <code>NETWORK_TYPE_UMTS = 3;</code>
         */
        NETWORK_TYPE_UMTS(3),
        /**
         * <pre>
         * * Current network is CDMA: Either IS95A or IS95B
         * </pre>
         *
         * <code>NETWORK_TYPE_CDMA = 4;</code>
         */
        NETWORK_TYPE_CDMA(4),
        /**
         * <pre>
         * * Current network is EVDO revision 0
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_0 = 5;</code>
         */
        NETWORK_TYPE_EVDO_0(5),
        /**
         * <pre>
         * * Current network is EVDO revision A
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_A = 6;</code>
         */
        NETWORK_TYPE_EVDO_A(6),
        /**
         * <pre>
         * * Current network is 1xRTT
         * </pre>
         *
         * <code>NETWORK_TYPE_1xRTT = 7;</code>
         */
        NETWORK_TYPE_1xRTT(7),
        /**
         * <pre>
         * * Current network is HSDPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSDPA = 8;</code>
         */
        NETWORK_TYPE_HSDPA(8),
        /**
         * <pre>
         * * Current network is HSUPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSUPA = 9;</code>
         */
        NETWORK_TYPE_HSUPA(9),
        /**
         * <pre>
         * * Current network is HSPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSPA = 10;</code>
         */
        NETWORK_TYPE_HSPA(10),
        /**
         * <pre>
         * * Current network is iDen
         * </pre>
         *
         * <code>NETWORK_TYPE_IDEN = 11;</code>
         */
        NETWORK_TYPE_IDEN(11),
        /**
         * <pre>
         * * Current network is EVDO revision B
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_B = 12;</code>
         */
        NETWORK_TYPE_EVDO_B(12),
        /**
         * <pre>
         * * Current network is LTE
         * </pre>
         *
         * <code>NETWORK_TYPE_LTE = 13;</code>
         */
        NETWORK_TYPE_LTE(13),
        /**
         * <pre>
         * * Current network is eHRPD
         * </pre>
         *
         * <code>NETWORK_TYPE_EHRPD = 14;</code>
         */
        NETWORK_TYPE_EHRPD(14),
        /**
         * <pre>
         * * Current network is HSPA+
         * </pre>
         *
         * <code>NETWORK_TYPE_HSPAP = 15;</code>
         */
        NETWORK_TYPE_HSPAP(15),
        /**
         * <pre>
         * * Current network is GSM
         * </pre>
         *
         * <code>NETWORK_TYPE_GSM = 16;</code>
         */
        NETWORK_TYPE_GSM(16),
        /**
         * <pre>
         * * Current network is TD_SCDMA
         * </pre>
         *
         * <code>NETWORK_TYPE_TD_SCDMA = 17;</code>
         */
        NETWORK_TYPE_TD_SCDMA(17),
        /**
         * <pre>
         * * Current network is IWLAN
         * </pre>
         *
         * <code>NETWORK_TYPE_IWLAN = 18;</code>
         */
        NETWORK_TYPE_IWLAN(18),
        /**
         * <pre>
         * * Current network is LTE_CA {&#64;hide}
         * </pre>
         *
         * <code>NETWORK_TYPE_LTE_CA = 19;</code>
         */
        NETWORK_TYPE_LTE_CA(19),
        ;

        /**
         * <pre>
         * * Network type is unknown
         * </pre>
         *
         * <code>NETWORK_TYPE_UNKNOWN = 0;</code>
         */
        public static final int NETWORK_TYPE_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * * Current network is GPRS
         * </pre>
         *
         * <code>NETWORK_TYPE_GPRS = 1;</code>
         */
        public static final int NETWORK_TYPE_GPRS_VALUE = 1;
        /**
         * <pre>
         * * Current network is EDGE
         * </pre>
         *
         * <code>NETWORK_TYPE_EDGE = 2;</code>
         */
        public static final int NETWORK_TYPE_EDGE_VALUE = 2;
        /**
         * <pre>
         * * Current network is UMTS
         * </pre>
         *
         * <code>NETWORK_TYPE_UMTS = 3;</code>
         */
        public static final int NETWORK_TYPE_UMTS_VALUE = 3;
        /**
         * <pre>
         * * Current network is CDMA: Either IS95A or IS95B
         * </pre>
         *
         * <code>NETWORK_TYPE_CDMA = 4;</code>
         */
        public static final int NETWORK_TYPE_CDMA_VALUE = 4;
        /**
         * <pre>
         * * Current network is EVDO revision 0
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_0 = 5;</code>
         */
        public static final int NETWORK_TYPE_EVDO_0_VALUE = 5;
        /**
         * <pre>
         * * Current network is EVDO revision A
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_A = 6;</code>
         */
        public static final int NETWORK_TYPE_EVDO_A_VALUE = 6;
        /**
         * <pre>
         * * Current network is 1xRTT
         * </pre>
         *
         * <code>NETWORK_TYPE_1xRTT = 7;</code>
         */
        public static final int NETWORK_TYPE_1xRTT_VALUE = 7;
        /**
         * <pre>
         * * Current network is HSDPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSDPA = 8;</code>
         */
        public static final int NETWORK_TYPE_HSDPA_VALUE = 8;
        /**
         * <pre>
         * * Current network is HSUPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSUPA = 9;</code>
         */
        public static final int NETWORK_TYPE_HSUPA_VALUE = 9;
        /**
         * <pre>
         * * Current network is HSPA
         * </pre>
         *
         * <code>NETWORK_TYPE_HSPA = 10;</code>
         */
        public static final int NETWORK_TYPE_HSPA_VALUE = 10;
        /**
         * <pre>
         * * Current network is iDen
         * </pre>
         *
         * <code>NETWORK_TYPE_IDEN = 11;</code>
         */
        public static final int NETWORK_TYPE_IDEN_VALUE = 11;
        /**
         * <pre>
         * * Current network is EVDO revision B
         * </pre>
         *
         * <code>NETWORK_TYPE_EVDO_B = 12;</code>
         */
        public static final int NETWORK_TYPE_EVDO_B_VALUE = 12;
        /**
         * <pre>
         * * Current network is LTE
         * </pre>
         *
         * <code>NETWORK_TYPE_LTE = 13;</code>
         */
        public static final int NETWORK_TYPE_LTE_VALUE = 13;
        /**
         * <pre>
         * * Current network is eHRPD
         * </pre>
         *
         * <code>NETWORK_TYPE_EHRPD = 14;</code>
         */
        public static final int NETWORK_TYPE_EHRPD_VALUE = 14;
        /**
         * <pre>
         * * Current network is HSPA+
         * </pre>
         *
         * <code>NETWORK_TYPE_HSPAP = 15;</code>
         */
        public static final int NETWORK_TYPE_HSPAP_VALUE = 15;
        /**
         * <pre>
         * * Current network is GSM
         * </pre>
         *
         * <code>NETWORK_TYPE_GSM = 16;</code>
         */
        public static final int NETWORK_TYPE_GSM_VALUE = 16;
        /**
         * <pre>
         * * Current network is TD_SCDMA
         * </pre>
         *
         * <code>NETWORK_TYPE_TD_SCDMA = 17;</code>
         */
        public static final int NETWORK_TYPE_TD_SCDMA_VALUE = 17;
        /**
         * <pre>
         * * Current network is IWLAN
         * </pre>
         *
         * <code>NETWORK_TYPE_IWLAN = 18;</code>
         */
        public static final int NETWORK_TYPE_IWLAN_VALUE = 18;
        /**
         * <pre>
         * * Current network is LTE_CA {&#64;hide}
         * </pre>
         *
         * <code>NETWORK_TYPE_LTE_CA = 19;</code>
         */
        public static final int NETWORK_TYPE_LTE_CA_VALUE = 19;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static NetworkType valueOf(int value) {
            return forNumber(value);
        }

        public static NetworkType forNumber(int value) {
            switch (value) {
                case 0:
                    return NETWORK_TYPE_UNKNOWN;
                case 1:
                    return NETWORK_TYPE_GPRS;
                case 2:
                    return NETWORK_TYPE_EDGE;
                case 3:
                    return NETWORK_TYPE_UMTS;
                case 4:
                    return NETWORK_TYPE_CDMA;
                case 5:
                    return NETWORK_TYPE_EVDO_0;
                case 6:
                    return NETWORK_TYPE_EVDO_A;
                case 7:
                    return NETWORK_TYPE_1xRTT;
                case 8:
                    return NETWORK_TYPE_HSDPA;
                case 9:
                    return NETWORK_TYPE_HSUPA;
                case 10:
                    return NETWORK_TYPE_HSPA;
                case 11:
                    return NETWORK_TYPE_IDEN;
                case 12:
                    return NETWORK_TYPE_EVDO_B;
                case 13:
                    return NETWORK_TYPE_LTE;
                case 14:
                    return NETWORK_TYPE_EHRPD;
                case 15:
                    return NETWORK_TYPE_HSPAP;
                case 16:
                    return NETWORK_TYPE_GSM;
                case 17:
                    return NETWORK_TYPE_TD_SCDMA;
                case 18:
                    return NETWORK_TYPE_IWLAN;
                case 19:
                    return NETWORK_TYPE_LTE_CA;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<NetworkType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                NetworkType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<NetworkType>() {
                    public NetworkType findValueByNumber(int number) {
                        return NetworkType.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return Common.getDescriptor().getEnumTypes().get(0);
        }

        private static final NetworkType[] VALUES = values();

        public static NetworkType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private NetworkType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:NetworkType)
    }

    /**
     * Protobuf enum {@code RadioTechType}
     */
    public enum RadioTechType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * GSM/WCDMA preferred
         * </pre>
         *
         * <code>GW_prefered = 0;</code>
         */
        GW_prefered(0),
        /**
         * <code>GSM_only = 1;</code>
         */
        GSM_only(1),
        /**
         * <code>WCDMA_only = 2;</code>
         */
        WCDMA_only(2),
        /**
         * <code>GW_auto = 3;</code>
         */
        GW_auto(3),
        /**
         * <pre>
         * CDMA/EvDo auto
         * </pre>
         *
         * <code>CE_auto = 4;</code>
         */
        CE_auto(4),
        /**
         * <code>CDMA_w_o_EvDo = 5;</code>
         */
        CDMA_w_o_EvDo(5),
        /**
         * <code>EvDo_only = 6;</code>
         */
        EvDo_only(6),
        /**
         * <pre>
         * CDMA/EvDo/GSM/WCDMA
         * </pre>
         *
         * <code>CEGW = 7;</code>
         */
        CEGW(7),
        /**
         * <pre>
         * CDMA + LTE/EvDo
         * </pre>
         *
         * <code>CDMA_LE = 8;</code>
         */
        CDMA_LE(8),
        /**
         * <pre>
         * GSM/WCDMA/LTE
         * </pre>
         *
         * <code>GWL = 9;</code>
         */
        GWL(9),
        /**
         * <pre>
         * LTE/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>Global = 10;</code>
         */
        Global(10),
        /**
         * <code>LTE = 11;</code>
         */
        LTE(11),
        /**
         * <pre>
         * LTE / WCDMA
         * </pre>
         *
         * <code>LW = 12;</code>
         */
        LW(12),
        /**
         * <code>TDSCDMA_only = 13;</code>
         */
        TDSCDMA_only(13),
        /**
         * <pre>
         * TDSCDMA/WCDMA
         * </pre>
         *
         * <code>TW = 14;</code>
         */
        TW(14),
        /**
         * <pre>
         * LTE/TDSCDMA
         * </pre>
         *
         * <code>LT = 15;</code>
         */
        LT(15),
        /**
         * <pre>
         * TDSCDMA/GSM
         * </pre>
         *
         * <code>TG = 16;</code>
         */
        TG(16),
        /**
         * <pre>
         * LTE/TDSCDMA/GSM
         * </pre>
         *
         * <code>LTG = 17;</code>
         */
        LTG(17),
        /**
         * <pre>
         * TDSCDMA/GSM/WCDMA
         * </pre>
         *
         * <code>TGW = 18;</code>
         */
        TGW(18),
        /**
         * <pre>
         * LTE/TDSCDMA/WCDMA
         * </pre>
         *
         * <code>LTW = 19;</code>
         */
        LTW(19),
        /**
         * <pre>
         * LTE/TDSCDMA/GSM/WCDMA
         * </pre>
         *
         * <code>LTGW = 20;</code>
         */
        LTGW(20),
        /**
         * <pre>
         * TDSCDMA/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>TCEGW = 21;</code>
         */
        TCEGW(21),
        /**
         * <pre>
         * LTE/TDSCDMA/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>LTCEGW = 22;</code>
         */
        LTCEGW(22),
        ;

        /**
         * <pre>
         * GSM/WCDMA preferred
         * </pre>
         *
         * <code>GW_prefered = 0;</code>
         */
        public static final int GW_prefered_VALUE = 0;
        /**
         * <code>GSM_only = 1;</code>
         */
        public static final int GSM_only_VALUE = 1;
        /**
         * <code>WCDMA_only = 2;</code>
         */
        public static final int WCDMA_only_VALUE = 2;
        /**
         * <code>GW_auto = 3;</code>
         */
        public static final int GW_auto_VALUE = 3;
        /**
         * <pre>
         * CDMA/EvDo auto
         * </pre>
         *
         * <code>CE_auto = 4;</code>
         */
        public static final int CE_auto_VALUE = 4;
        /**
         * <code>CDMA_w_o_EvDo = 5;</code>
         */
        public static final int CDMA_w_o_EvDo_VALUE = 5;
        /**
         * <code>EvDo_only = 6;</code>
         */
        public static final int EvDo_only_VALUE = 6;
        /**
         * <pre>
         * CDMA/EvDo/GSM/WCDMA
         * </pre>
         *
         * <code>CEGW = 7;</code>
         */
        public static final int CEGW_VALUE = 7;
        /**
         * <pre>
         * CDMA + LTE/EvDo
         * </pre>
         *
         * <code>CDMA_LE = 8;</code>
         */
        public static final int CDMA_LE_VALUE = 8;
        /**
         * <pre>
         * GSM/WCDMA/LTE
         * </pre>
         *
         * <code>GWL = 9;</code>
         */
        public static final int GWL_VALUE = 9;
        /**
         * <pre>
         * LTE/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>Global = 10;</code>
         */
        public static final int Global_VALUE = 10;
        /**
         * <code>LTE = 11;</code>
         */
        public static final int LTE_VALUE = 11;
        /**
         * <pre>
         * LTE / WCDMA
         * </pre>
         *
         * <code>LW = 12;</code>
         */
        public static final int LW_VALUE = 12;
        /**
         * <code>TDSCDMA_only = 13;</code>
         */
        public static final int TDSCDMA_only_VALUE = 13;
        /**
         * <pre>
         * TDSCDMA/WCDMA
         * </pre>
         *
         * <code>TW = 14;</code>
         */
        public static final int TW_VALUE = 14;
        /**
         * <pre>
         * LTE/TDSCDMA
         * </pre>
         *
         * <code>LT = 15;</code>
         */
        public static final int LT_VALUE = 15;
        /**
         * <pre>
         * TDSCDMA/GSM
         * </pre>
         *
         * <code>TG = 16;</code>
         */
        public static final int TG_VALUE = 16;
        /**
         * <pre>
         * LTE/TDSCDMA/GSM
         * </pre>
         *
         * <code>LTG = 17;</code>
         */
        public static final int LTG_VALUE = 17;
        /**
         * <pre>
         * TDSCDMA/GSM/WCDMA
         * </pre>
         *
         * <code>TGW = 18;</code>
         */
        public static final int TGW_VALUE = 18;
        /**
         * <pre>
         * LTE/TDSCDMA/WCDMA
         * </pre>
         *
         * <code>LTW = 19;</code>
         */
        public static final int LTW_VALUE = 19;
        /**
         * <pre>
         * LTE/TDSCDMA/GSM/WCDMA
         * </pre>
         *
         * <code>LTGW = 20;</code>
         */
        public static final int LTGW_VALUE = 20;
        /**
         * <pre>
         * TDSCDMA/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>TCEGW = 21;</code>
         */
        public static final int TCEGW_VALUE = 21;
        /**
         * <pre>
         * LTE/TDSCDMA/CDMA/EVDO/GSM/WCDMA
         * </pre>
         *
         * <code>LTCEGW = 22;</code>
         */
        public static final int LTCEGW_VALUE = 22;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static RadioTechType valueOf(int value) {
            return forNumber(value);
        }

        public static RadioTechType forNumber(int value) {
            switch (value) {
                case 0:
                    return GW_prefered;
                case 1:
                    return GSM_only;
                case 2:
                    return WCDMA_only;
                case 3:
                    return GW_auto;
                case 4:
                    return CE_auto;
                case 5:
                    return CDMA_w_o_EvDo;
                case 6:
                    return EvDo_only;
                case 7:
                    return CEGW;
                case 8:
                    return CDMA_LE;
                case 9:
                    return GWL;
                case 10:
                    return Global;
                case 11:
                    return LTE;
                case 12:
                    return LW;
                case 13:
                    return TDSCDMA_only;
                case 14:
                    return TW;
                case 15:
                    return LT;
                case 16:
                    return TG;
                case 17:
                    return LTG;
                case 18:
                    return TGW;
                case 19:
                    return LTW;
                case 20:
                    return LTGW;
                case 21:
                    return TCEGW;
                case 22:
                    return LTCEGW;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RadioTechType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                RadioTechType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<RadioTechType>() {
                    public RadioTechType findValueByNumber(int number) {
                        return RadioTechType.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return Common.getDescriptor().getEnumTypes().get(1);
        }

        private static final RadioTechType[] VALUES = values();

        public static RadioTechType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private RadioTechType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:RadioTechType)
    }

    /**
     * Protobuf enum {@code SimcardReleaseReason}
     */
    public enum SimcardReleaseReason
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * network
         * </pre>
         *
         * <code>NETWORK_SIGNAL_POOR = 1;</code>
         */
        NETWORK_SIGNAL_POOR(1),
        /**
         * <code>NETWORK_NO_SERVICE = 2;</code>
         */
        NETWORK_NO_SERVICE(2),
        /**
         * <code>NETWORK_NO_DATA = 3;</code>
         */
        NETWORK_NO_DATA(3),
        /**
         * <code>NETWORK_TECH_SWITCH_TOO_FREQUENTLY = 4;</code>
         */
        NETWORK_TECH_SWITCH_TOO_FREQUENTLY(4),
        /**
         * <pre>
         * reserve
         * </pre>
         *
         * <code>NETWORK_AUTH_TOO_FREQUENTLY = 5;</code>
         */
        NETWORK_AUTH_TOO_FREQUENTLY(5),
        /**
         * <code>NETWORK_DIAGNOSIS_FAILURE = 6;</code>
         */
        NETWORK_DIAGNOSIS_FAILURE(6),
        /**
         * <pre>
         * battery
         * </pre>
         *
         * <code>BATT_LOW_POWER = 8;</code>
         */
        BATT_LOW_POWER(8),
        /**
         * <code>BATT_HIGH_TEMPRETURE = 9;</code>
         */
        BATT_HIGH_TEMPRETURE(9),
        /**
         * <pre>
         * simcard
         * </pre>
         *
         * <code>SIMCARD_TRAFFIC_SHORTAGE = 15;</code>
         */
        SIMCARD_TRAFFIC_SHORTAGE(15),
        /**
         * <code>SIMCARD_ROAMING_AERA_UNSUPPORT = 16;</code>
         */
        SIMCARD_ROAMING_AERA_UNSUPPORT(16),
        /**
         * <code>SIMCARD_STATE_ABNORMAL = 17;</code>
         */
        SIMCARD_STATE_ABNORMAL(17),
        /**
         * <code>SIMCARD_BINDING_EXPIRE = 18;</code>
         */
        SIMCARD_BINDING_EXPIRE(18),
        /**
         * <code>SIMCARD_CHANGE_REQUEST = 19;</code>
         */
        SIMCARD_CHANGE_REQUEST(19),
        /**
         * <code>SIMCARD_RECYCLE_REQUEST = 20;</code>
         */
        SIMCARD_RECYCLE_REQUEST(20),
        /**
         * <code>SIMCARD_SESSION_OVERTIME = 21;</code>
         */
        SIMCARD_SESSION_OVERTIME(21),
        /**
         * <code>SIMCARD_NOT_BEST_MATCHED = 22;</code>
         */
        SIMCARD_NOT_BEST_MATCHED(22),
        /**
         * <code>SIMCARD_LSR_DELETED = 25;</code>
         */
        SIMCARD_LSR_DELETED(25),
        /**
         * <pre>
         * system
         * </pre>
         *
         * <code>SYS_UPDATE = 26;</code>
         */
        SYS_UPDATE(26),
        /**
         * <code>SYS_REBOOT = 27;</code>
         */
        SYS_REBOOT(27),
        /**
         * <code>SYS_SHUTDOWN = 28;</code>
         */
        SYS_SHUTDOWN(28),
        /**
         * <code>VSIM_UPGRADE = 31;</code>
         */
        VSIM_UPGRADE(31),
        /**
         * <code>RMT_ACTIVE = 32;</code>
         */
        RMT_ACTIVE(32),
        /**
         * <pre>
         * device
         * </pre>
         *
         * <code>DEVICE_STATUS_INVALIAD = 40;</code>
         */
        DEVICE_STATUS_INVALIAD(40),
        /**
         * <code>DEVICE_OUT_OF_TOUCH = 41;</code>
         */
        DEVICE_OUT_OF_TOUCH(41),
        /**
         * <code>DEVICE_CERT_NOT_FOUND = 42;</code>
         */
        DEVICE_CERT_NOT_FOUND(42),
        /**
         * <code>DEVICE_AUTH_FAILURE = 43;</code>
         */
        DEVICE_AUTH_FAILURE(43),
        /**
         * <pre>
         * account
         * </pre>
         *
         * <code>ACCOUNT_LOW_CREDIT = 50;</code>
         */
        ACCOUNT_LOW_CREDIT(50),
        /**
         * <pre>
         * </pre>
         *
         * <code>ABNORMAL_POWER_CUTOFF = 60;</code>
         */
        ABNORMAL_POWER_CUTOFF(60),
        /**
         * <pre>
         * simbank [81~100]
         * </pre>
         *
         * <code>SIMBANK_SIMCARD_NO_REPONSE = 81;</code>
         */
        SIMBANK_SIMCARD_NO_REPONSE(81),
        /**
         * <code>SIMBANK_SIMCARD_NOT_FOUND = 82;</code>
         */
        SIMBANK_SIMCARD_NOT_FOUND(82),
        /**
         * <code>SIMBANK_NOT_READY = 83;</code>
         */
        SIMBANK_NOT_READY(83),
        /**
         * <code>SIMBANK_INTERNAL_ERROR = 84;</code>
         */
        SIMBANK_INTERNAL_ERROR(84),
        /**
         * <code>SIMBANK_SIMCARD_INVALID = 86;</code>
         */
        SIMBANK_SIMCARD_INVALID(86),
        /**
         * <code>SIMBANK_SIMCARD_AUTH_INVALID = 87;</code>
         */
        SIMBANK_SIMCARD_AUTH_INVALID(87),
        /**
         * <pre>
         * backend
         * </pre>
         *
         * <code>BACKEND_REQ_TIMEOUT = 151;</code>
         */
        BACKEND_REQ_TIMEOUT(151),
        /**
         * <code>BACKEND_NETWORK_ERROR = 152;</code>
         */
        BACKEND_NETWORK_ERROR(152),
        /**
         * <code>BACKEND_QUERY_ERROR = 153;</code>
         */
        BACKEND_QUERY_ERROR(153),
        ;

        /**
         * <pre>
         * network
         * </pre>
         *
         * <code>NETWORK_SIGNAL_POOR = 1;</code>
         */
        public static final int NETWORK_SIGNAL_POOR_VALUE = 1;
        /**
         * <code>NETWORK_NO_SERVICE = 2;</code>
         */
        public static final int NETWORK_NO_SERVICE_VALUE = 2;
        /**
         * <code>NETWORK_NO_DATA = 3;</code>
         */
        public static final int NETWORK_NO_DATA_VALUE = 3;
        /**
         * <code>NETWORK_TECH_SWITCH_TOO_FREQUENTLY = 4;</code>
         */
        public static final int NETWORK_TECH_SWITCH_TOO_FREQUENTLY_VALUE = 4;
        /**
         * <pre>
         * reserve
         * </pre>
         *
         * <code>NETWORK_AUTH_TOO_FREQUENTLY = 5;</code>
         */
        public static final int NETWORK_AUTH_TOO_FREQUENTLY_VALUE = 5;
        /**
         * <code>NETWORK_DIAGNOSIS_FAILURE = 6;</code>
         */
        public static final int NETWORK_DIAGNOSIS_FAILURE_VALUE = 6;
        /**
         * <pre>
         * battery
         * </pre>
         *
         * <code>BATT_LOW_POWER = 8;</code>
         */
        public static final int BATT_LOW_POWER_VALUE = 8;
        /**
         * <code>BATT_HIGH_TEMPRETURE = 9;</code>
         */
        public static final int BATT_HIGH_TEMPRETURE_VALUE = 9;
        /**
         * <pre>
         * simcard
         * </pre>
         *
         * <code>SIMCARD_TRAFFIC_SHORTAGE = 15;</code>
         */
        public static final int SIMCARD_TRAFFIC_SHORTAGE_VALUE = 15;
        /**
         * <code>SIMCARD_ROAMING_AERA_UNSUPPORT = 16;</code>
         */
        public static final int SIMCARD_ROAMING_AERA_UNSUPPORT_VALUE = 16;
        /**
         * <code>SIMCARD_STATE_ABNORMAL = 17;</code>
         */
        public static final int SIMCARD_STATE_ABNORMAL_VALUE = 17;
        /**
         * <code>SIMCARD_BINDING_EXPIRE = 18;</code>
         */
        public static final int SIMCARD_BINDING_EXPIRE_VALUE = 18;
        /**
         * <code>SIMCARD_CHANGE_REQUEST = 19;</code>
         */
        public static final int SIMCARD_CHANGE_REQUEST_VALUE = 19;
        /**
         * <code>SIMCARD_RECYCLE_REQUEST = 20;</code>
         */
        public static final int SIMCARD_RECYCLE_REQUEST_VALUE = 20;
        /**
         * <code>SIMCARD_SESSION_OVERTIME = 21;</code>
         */
        public static final int SIMCARD_SESSION_OVERTIME_VALUE = 21;
        /**
         * <code>SIMCARD_NOT_BEST_MATCHED = 22;</code>
         */
        public static final int SIMCARD_NOT_BEST_MATCHED_VALUE = 22;
        /**
         * <code>SIMCARD_LSR_DELETED = 25;</code>
         */
        public static final int SIMCARD_LSR_DELETED_VALUE = 25;
        /**
         * <pre>
         * system
         * </pre>
         *
         * <code>SYS_UPDATE = 26;</code>
         */
        public static final int SYS_UPDATE_VALUE = 26;
        /**
         * <code>SYS_REBOOT = 27;</code>
         */
        public static final int SYS_REBOOT_VALUE = 27;
        /**
         * <code>SYS_SHUTDOWN = 28;</code>
         */
        public static final int SYS_SHUTDOWN_VALUE = 28;
        /**
         * <code>VSIM_UPGRADE = 31;</code>
         */
        public static final int VSIM_UPGRADE_VALUE = 31;
        /**
         * <code>RMT_ACTIVE = 32;</code>
         */
        public static final int RMT_ACTIVE_VALUE = 32;
        /**
         * <pre>
         * device
         * </pre>
         *
         * <code>DEVICE_STATUS_INVALIAD = 40;</code>
         */
        public static final int DEVICE_STATUS_INVALIAD_VALUE = 40;
        /**
         * <code>DEVICE_OUT_OF_TOUCH = 41;</code>
         */
        public static final int DEVICE_OUT_OF_TOUCH_VALUE = 41;
        /**
         * <code>DEVICE_CERT_NOT_FOUND = 42;</code>
         */
        public static final int DEVICE_CERT_NOT_FOUND_VALUE = 42;
        /**
         * <code>DEVICE_AUTH_FAILURE = 43;</code>
         */
        public static final int DEVICE_AUTH_FAILURE_VALUE = 43;
        /**
         * <pre>
         * account
         * </pre>
         *
         * <code>ACCOUNT_LOW_CREDIT = 50;</code>
         */
        public static final int ACCOUNT_LOW_CREDIT_VALUE = 50;
        /**
         * <pre>
         * </pre>
         *
         * <code>ABNORMAL_POWER_CUTOFF = 60;</code>
         */
        public static final int ABNORMAL_POWER_CUTOFF_VALUE = 60;
        /**
         * <pre>
         * simbank [81~100]
         * </pre>
         *
         * <code>SIMBANK_SIMCARD_NO_REPONSE = 81;</code>
         */
        public static final int SIMBANK_SIMCARD_NO_REPONSE_VALUE = 81;
        /**
         * <code>SIMBANK_SIMCARD_NOT_FOUND = 82;</code>
         */
        public static final int SIMBANK_SIMCARD_NOT_FOUND_VALUE = 82;
        /**
         * <code>SIMBANK_NOT_READY = 83;</code>
         */
        public static final int SIMBANK_NOT_READY_VALUE = 83;
        /**
         * <code>SIMBANK_INTERNAL_ERROR = 84;</code>
         */
        public static final int SIMBANK_INTERNAL_ERROR_VALUE = 84;
        /**
         * <code>SIMBANK_SIMCARD_INVALID = 86;</code>
         */
        public static final int SIMBANK_SIMCARD_INVALID_VALUE = 86;
        /**
         * <code>SIMBANK_SIMCARD_AUTH_INVALID = 87;</code>
         */
        public static final int SIMBANK_SIMCARD_AUTH_INVALID_VALUE = 87;
        /**
         * <pre>
         * backend
         * </pre>
         *
         * <code>BACKEND_REQ_TIMEOUT = 151;</code>
         */
        public static final int BACKEND_REQ_TIMEOUT_VALUE = 151;
        /**
         * <code>BACKEND_NETWORK_ERROR = 152;</code>
         */
        public static final int BACKEND_NETWORK_ERROR_VALUE = 152;
        /**
         * <code>BACKEND_QUERY_ERROR = 153;</code>
         */
        public static final int BACKEND_QUERY_ERROR_VALUE = 153;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static SimcardReleaseReason valueOf(int value) {
            return forNumber(value);
        }

        public static SimcardReleaseReason forNumber(int value) {
            switch (value) {
                case 1:
                    return NETWORK_SIGNAL_POOR;
                case 2:
                    return NETWORK_NO_SERVICE;
                case 3:
                    return NETWORK_NO_DATA;
                case 4:
                    return NETWORK_TECH_SWITCH_TOO_FREQUENTLY;
                case 5:
                    return NETWORK_AUTH_TOO_FREQUENTLY;
                case 6:
                    return NETWORK_DIAGNOSIS_FAILURE;
                case 8:
                    return BATT_LOW_POWER;
                case 9:
                    return BATT_HIGH_TEMPRETURE;
                case 15:
                    return SIMCARD_TRAFFIC_SHORTAGE;
                case 16:
                    return SIMCARD_ROAMING_AERA_UNSUPPORT;
                case 17:
                    return SIMCARD_STATE_ABNORMAL;
                case 18:
                    return SIMCARD_BINDING_EXPIRE;
                case 19:
                    return SIMCARD_CHANGE_REQUEST;
                case 20:
                    return SIMCARD_RECYCLE_REQUEST;
                case 21:
                    return SIMCARD_SESSION_OVERTIME;
                case 22:
                    return SIMCARD_NOT_BEST_MATCHED;
                case 25:
                    return SIMCARD_LSR_DELETED;
                case 26:
                    return SYS_UPDATE;
                case 27:
                    return SYS_REBOOT;
                case 28:
                    return SYS_SHUTDOWN;
                case 31:
                    return VSIM_UPGRADE;
                case 32:
                    return RMT_ACTIVE;
                case 40:
                    return DEVICE_STATUS_INVALIAD;
                case 41:
                    return DEVICE_OUT_OF_TOUCH;
                case 42:
                    return DEVICE_CERT_NOT_FOUND;
                case 43:
                    return DEVICE_AUTH_FAILURE;
                case 50:
                    return ACCOUNT_LOW_CREDIT;
                case 60:
                    return ABNORMAL_POWER_CUTOFF;
                case 81:
                    return SIMBANK_SIMCARD_NO_REPONSE;
                case 82:
                    return SIMBANK_SIMCARD_NOT_FOUND;
                case 83:
                    return SIMBANK_NOT_READY;
                case 84:
                    return SIMBANK_INTERNAL_ERROR;
                case 86:
                    return SIMBANK_SIMCARD_INVALID;
                case 87:
                    return SIMBANK_SIMCARD_AUTH_INVALID;
                case 151:
                    return BACKEND_REQ_TIMEOUT;
                case 152:
                    return BACKEND_NETWORK_ERROR;
                case 153:
                    return BACKEND_QUERY_ERROR;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<SimcardReleaseReason>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                SimcardReleaseReason> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<SimcardReleaseReason>() {
                    public SimcardReleaseReason findValueByNumber(int number) {
                        return SimcardReleaseReason.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return Common.getDescriptor().getEnumTypes().get(2);
        }

        private static final SimcardReleaseReason[] VALUES = values();

        public static SimcardReleaseReason valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private SimcardReleaseReason(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:SimcardReleaseReason)
    }

    public interface ApnOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Apn)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>optional string carrier = 1;</code>
         */
        boolean hasCarrier();

        /**
         * <code>optional string carrier = 1;</code>
         */
        String getCarrier();

        /**
         * <code>optional string carrier = 1;</code>
         */
        com.google.protobuf.ByteString
        getCarrierBytes();

        /**
         * <code>required string mcc = 2;</code>
         */
        boolean hasMcc();

        /**
         * <code>required string mcc = 2;</code>
         */
        String getMcc();

        /**
         * <code>required string mcc = 2;</code>
         */
        com.google.protobuf.ByteString
        getMccBytes();

        /**
         * <code>required string mnc = 3;</code>
         */
        boolean hasMnc();

        /**
         * <code>required string mnc = 3;</code>
         */
        String getMnc();

        /**
         * <code>required string mnc = 3;</code>
         */
        com.google.protobuf.ByteString
        getMncBytes();

        /**
         * <code>required string apn = 4;</code>
         */
        boolean hasApn();

        /**
         * <code>required string apn = 4;</code>
         */
        String getApn();

        /**
         * <code>required string apn = 4;</code>
         */
        com.google.protobuf.ByteString
        getApnBytes();

        /**
         * <code>optional string user = 5;</code>
         */
        boolean hasUser();

        /**
         * <code>optional string user = 5;</code>
         */
        String getUser();

        /**
         * <code>optional string user = 5;</code>
         */
        com.google.protobuf.ByteString
        getUserBytes();

        /**
         * <code>optional string server = 6;</code>
         */
        boolean hasServer();

        /**
         * <code>optional string server = 6;</code>
         */
        String getServer();

        /**
         * <code>optional string server = 6;</code>
         */
        com.google.protobuf.ByteString
        getServerBytes();

        /**
         * <code>optional string password = 7;</code>
         */
        boolean hasPassword();

        /**
         * <code>optional string password = 7;</code>
         */
        String getPassword();

        /**
         * <code>optional string password = 7;</code>
         */
        com.google.protobuf.ByteString
        getPasswordBytes();

        /**
         * <code>optional string proxy = 8;</code>
         */
        boolean hasProxy();

        /**
         * <code>optional string proxy = 8;</code>
         */
        String getProxy();

        /**
         * <code>optional string proxy = 8;</code>
         */
        com.google.protobuf.ByteString
        getProxyBytes();

        /**
         * <code>optional string port = 9;</code>
         */
        boolean hasPort();

        /**
         * <code>optional string port = 9;</code>
         */
        String getPort();

        /**
         * <code>optional string port = 9;</code>
         */
        com.google.protobuf.ByteString
        getPortBytes();

        /**
         * <code>optional uint32 authtype = 10;</code>
         */
        boolean hasAuthtype();

        /**
         * <code>optional uint32 authtype = 10;</code>
         */
        int getAuthtype();

        /**
         * <code>optional string type = 11;</code>
         */
        boolean hasType();

        /**
         * <code>optional string type = 11;</code>
         */
        String getType();

        /**
         * <code>optional string type = 11;</code>
         */
        com.google.protobuf.ByteString
        getTypeBytes();

        /**
         * <code>optional string protocol = 12;</code>
         */
        boolean hasProtocol();

        /**
         * <code>optional string protocol = 12;</code>
         */
        String getProtocol();

        /**
         * <code>optional string protocol = 12;</code>
         */
        com.google.protobuf.ByteString
        getProtocolBytes();

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        boolean hasRoamingProtocol();

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        String getRoamingProtocol();

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        com.google.protobuf.ByteString
        getRoamingProtocolBytes();

        /**
         * <code>optional bool preferred = 14;</code>
         */
        boolean hasPreferred();

        /**
         * <code>optional bool preferred = 14;</code>
         */
        boolean getPreferred();
    }

    /**
     * <pre>
     * option optimize_for = LITE_RUNTIME;
     * </pre>
     * <p>
     * Protobuf type {@code Apn}
     */
    public static final class Apn extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:Apn)
            ApnOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use Apn.newBuilder() to construct.
        private Apn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Apn() {
            carrier_ = "";
            mcc_ = "";
            mnc_ = "";
            apn_ = "";
            user_ = "";
            server_ = "";
            password_ = "";
            proxy_ = "";
            port_ = "";
            type_ = "";
            protocol_ = "";
            roamingProtocol_ = "";
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Apn(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            carrier_ = bs;
                            break;
                        }
                        case 18: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            mcc_ = bs;
                            break;
                        }
                        case 26: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000004;
                            mnc_ = bs;
                            break;
                        }
                        case 34: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000008;
                            apn_ = bs;
                            break;
                        }
                        case 42: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000010;
                            user_ = bs;
                            break;
                        }
                        case 50: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000020;
                            server_ = bs;
                            break;
                        }
                        case 58: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000040;
                            password_ = bs;
                            break;
                        }
                        case 66: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000080;
                            proxy_ = bs;
                            break;
                        }
                        case 74: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000100;
                            port_ = bs;
                            break;
                        }
                        case 80: {
                            bitField0_ |= 0x00000200;
                            authtype_ = input.readUInt32();
                            break;
                        }
                        case 90: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000400;
                            type_ = bs;
                            break;
                        }
                        case 98: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000800;
                            protocol_ = bs;
                            break;
                        }
                        case 106: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00001000;
                            roamingProtocol_ = bs;
                            break;
                        }
                        case 112: {
                            bitField0_ |= 0x00002000;
                            preferred_ = input.readBool();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Common.internal_static_Apn_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Common.internal_static_Apn_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Apn.class, Builder.class);
        }

        private int bitField0_;
        public static final int CARRIER_FIELD_NUMBER = 1;
        private volatile Object carrier_;

        /**
         * <code>optional string carrier = 1;</code>
         */
        public boolean hasCarrier() {
            return ((bitField0_ & 0x00000001) != 0);
        }

        /**
         * <code>optional string carrier = 1;</code>
         */
        public String getCarrier() {
            Object ref = carrier_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    carrier_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string carrier = 1;</code>
         */
        public com.google.protobuf.ByteString
        getCarrierBytes() {
            Object ref = carrier_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                carrier_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int MCC_FIELD_NUMBER = 2;
        private volatile Object mcc_;

        /**
         * <code>required string mcc = 2;</code>
         */
        public boolean hasMcc() {
            return ((bitField0_ & 0x00000002) != 0);
        }

        /**
         * <code>required string mcc = 2;</code>
         */
        public String getMcc() {
            Object ref = mcc_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    mcc_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string mcc = 2;</code>
         */
        public com.google.protobuf.ByteString
        getMccBytes() {
            Object ref = mcc_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                mcc_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int MNC_FIELD_NUMBER = 3;
        private volatile Object mnc_;

        /**
         * <code>required string mnc = 3;</code>
         */
        public boolean hasMnc() {
            return ((bitField0_ & 0x00000004) != 0);
        }

        /**
         * <code>required string mnc = 3;</code>
         */
        public String getMnc() {
            Object ref = mnc_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    mnc_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string mnc = 3;</code>
         */
        public com.google.protobuf.ByteString
        getMncBytes() {
            Object ref = mnc_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                mnc_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int APN_FIELD_NUMBER = 4;
        private volatile Object apn_;

        /**
         * <code>required string apn = 4;</code>
         */
        public boolean hasApn() {
            return ((bitField0_ & 0x00000008) != 0);
        }

        /**
         * <code>required string apn = 4;</code>
         */
        public String getApn() {
            Object ref = apn_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    apn_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string apn = 4;</code>
         */
        public com.google.protobuf.ByteString
        getApnBytes() {
            Object ref = apn_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                apn_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int USER_FIELD_NUMBER = 5;
        private volatile Object user_;

        /**
         * <code>optional string user = 5;</code>
         */
        public boolean hasUser() {
            return ((bitField0_ & 0x00000010) != 0);
        }

        /**
         * <code>optional string user = 5;</code>
         */
        public String getUser() {
            Object ref = user_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    user_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string user = 5;</code>
         */
        public com.google.protobuf.ByteString
        getUserBytes() {
            Object ref = user_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                user_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SERVER_FIELD_NUMBER = 6;
        private volatile Object server_;

        /**
         * <code>optional string server = 6;</code>
         */
        public boolean hasServer() {
            return ((bitField0_ & 0x00000020) != 0);
        }

        /**
         * <code>optional string server = 6;</code>
         */
        public String getServer() {
            Object ref = server_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    server_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string server = 6;</code>
         */
        public com.google.protobuf.ByteString
        getServerBytes() {
            Object ref = server_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                server_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PASSWORD_FIELD_NUMBER = 7;
        private volatile Object password_;

        /**
         * <code>optional string password = 7;</code>
         */
        public boolean hasPassword() {
            return ((bitField0_ & 0x00000040) != 0);
        }

        /**
         * <code>optional string password = 7;</code>
         */
        public String getPassword() {
            Object ref = password_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    password_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string password = 7;</code>
         */
        public com.google.protobuf.ByteString
        getPasswordBytes() {
            Object ref = password_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                password_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PROXY_FIELD_NUMBER = 8;
        private volatile Object proxy_;

        /**
         * <code>optional string proxy = 8;</code>
         */
        public boolean hasProxy() {
            return ((bitField0_ & 0x00000080) != 0);
        }

        /**
         * <code>optional string proxy = 8;</code>
         */
        public String getProxy() {
            Object ref = proxy_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    proxy_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string proxy = 8;</code>
         */
        public com.google.protobuf.ByteString
        getProxyBytes() {
            Object ref = proxy_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                proxy_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PORT_FIELD_NUMBER = 9;
        private volatile Object port_;

        /**
         * <code>optional string port = 9;</code>
         */
        public boolean hasPort() {
            return ((bitField0_ & 0x00000100) != 0);
        }

        /**
         * <code>optional string port = 9;</code>
         */
        public String getPort() {
            Object ref = port_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    port_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string port = 9;</code>
         */
        public com.google.protobuf.ByteString
        getPortBytes() {
            Object ref = port_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                port_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int AUTHTYPE_FIELD_NUMBER = 10;
        private int authtype_;

        /**
         * <code>optional uint32 authtype = 10;</code>
         */
        public boolean hasAuthtype() {
            return ((bitField0_ & 0x00000200) != 0);
        }

        /**
         * <code>optional uint32 authtype = 10;</code>
         */
        public int getAuthtype() {
            return authtype_;
        }

        public static final int TYPE_FIELD_NUMBER = 11;
        private volatile Object type_;

        /**
         * <code>optional string type = 11;</code>
         */
        public boolean hasType() {
            return ((bitField0_ & 0x00000400) != 0);
        }

        /**
         * <code>optional string type = 11;</code>
         */
        public String getType() {
            Object ref = type_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    type_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string type = 11;</code>
         */
        public com.google.protobuf.ByteString
        getTypeBytes() {
            Object ref = type_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                type_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PROTOCOL_FIELD_NUMBER = 12;
        private volatile Object protocol_;

        /**
         * <code>optional string protocol = 12;</code>
         */
        public boolean hasProtocol() {
            return ((bitField0_ & 0x00000800) != 0);
        }

        /**
         * <code>optional string protocol = 12;</code>
         */
        public String getProtocol() {
            Object ref = protocol_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    protocol_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string protocol = 12;</code>
         */
        public com.google.protobuf.ByteString
        getProtocolBytes() {
            Object ref = protocol_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                protocol_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int ROAMING_PROTOCOL_FIELD_NUMBER = 13;
        private volatile Object roamingProtocol_;

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        public boolean hasRoamingProtocol() {
            return ((bitField0_ & 0x00001000) != 0);
        }

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        public String getRoamingProtocol() {
            Object ref = roamingProtocol_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    roamingProtocol_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string roaming_protocol = 13;</code>
         */
        public com.google.protobuf.ByteString
        getRoamingProtocolBytes() {
            Object ref = roamingProtocol_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                roamingProtocol_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PREFERRED_FIELD_NUMBER = 14;
        private boolean preferred_;

        /**
         * <code>optional bool preferred = 14;</code>
         */
        public boolean hasPreferred() {
            return ((bitField0_ & 0x00002000) != 0);
        }

        /**
         * <code>optional bool preferred = 14;</code>
         */
        public boolean getPreferred() {
            return preferred_;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasMcc()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMnc()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasApn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, carrier_);
            }
            if (((bitField0_ & 0x00000002) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mcc_);
            }
            if (((bitField0_ & 0x00000004) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 3, mnc_);
            }
            if (((bitField0_ & 0x00000008) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, apn_);
            }
            if (((bitField0_ & 0x00000010) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 5, user_);
            }
            if (((bitField0_ & 0x00000020) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 6, server_);
            }
            if (((bitField0_ & 0x00000040) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 7, password_);
            }
            if (((bitField0_ & 0x00000080) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 8, proxy_);
            }
            if (((bitField0_ & 0x00000100) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 9, port_);
            }
            if (((bitField0_ & 0x00000200) != 0)) {
                output.writeUInt32(10, authtype_);
            }
            if (((bitField0_ & 0x00000400) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 11, type_);
            }
            if (((bitField0_ & 0x00000800) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 12, protocol_);
            }
            if (((bitField0_ & 0x00001000) != 0)) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 13, roamingProtocol_);
            }
            if (((bitField0_ & 0x00002000) != 0)) {
                output.writeBool(14, preferred_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, carrier_);
            }
            if (((bitField0_ & 0x00000002) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mcc_);
            }
            if (((bitField0_ & 0x00000004) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, mnc_);
            }
            if (((bitField0_ & 0x00000008) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, apn_);
            }
            if (((bitField0_ & 0x00000010) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, user_);
            }
            if (((bitField0_ & 0x00000020) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, server_);
            }
            if (((bitField0_ & 0x00000040) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, password_);
            }
            if (((bitField0_ & 0x00000080) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, proxy_);
            }
            if (((bitField0_ & 0x00000100) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, port_);
            }
            if (((bitField0_ & 0x00000200) != 0)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(10, authtype_);
            }
            if (((bitField0_ & 0x00000400) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, type_);
            }
            if (((bitField0_ & 0x00000800) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, protocol_);
            }
            if (((bitField0_ & 0x00001000) != 0)) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, roamingProtocol_);
            }
            if (((bitField0_ & 0x00002000) != 0)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(14, preferred_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Apn)) {
                return super.equals(obj);
            }
            Apn other = (Apn) obj;

            if (hasCarrier() != other.hasCarrier()) return false;
            if (hasCarrier()) {
                if (!getCarrier()
                        .equals(other.getCarrier())) return false;
            }
            if (hasMcc() != other.hasMcc()) return false;
            if (hasMcc()) {
                if (!getMcc()
                        .equals(other.getMcc())) return false;
            }
            if (hasMnc() != other.hasMnc()) return false;
            if (hasMnc()) {
                if (!getMnc()
                        .equals(other.getMnc())) return false;
            }
            if (hasApn() != other.hasApn()) return false;
            if (hasApn()) {
                if (!getApn()
                        .equals(other.getApn())) return false;
            }
            if (hasUser() != other.hasUser()) return false;
            if (hasUser()) {
                if (!getUser()
                        .equals(other.getUser())) return false;
            }
            if (hasServer() != other.hasServer()) return false;
            if (hasServer()) {
                if (!getServer()
                        .equals(other.getServer())) return false;
            }
            if (hasPassword() != other.hasPassword()) return false;
            if (hasPassword()) {
                if (!getPassword()
                        .equals(other.getPassword())) return false;
            }
            if (hasProxy() != other.hasProxy()) return false;
            if (hasProxy()) {
                if (!getProxy()
                        .equals(other.getProxy())) return false;
            }
            if (hasPort() != other.hasPort()) return false;
            if (hasPort()) {
                if (!getPort()
                        .equals(other.getPort())) return false;
            }
            if (hasAuthtype() != other.hasAuthtype()) return false;
            if (hasAuthtype()) {
                if (getAuthtype()
                        != other.getAuthtype()) return false;
            }
            if (hasType() != other.hasType()) return false;
            if (hasType()) {
                if (!getType()
                        .equals(other.getType())) return false;
            }
            if (hasProtocol() != other.hasProtocol()) return false;
            if (hasProtocol()) {
                if (!getProtocol()
                        .equals(other.getProtocol())) return false;
            }
            if (hasRoamingProtocol() != other.hasRoamingProtocol()) return false;
            if (hasRoamingProtocol()) {
                if (!getRoamingProtocol()
                        .equals(other.getRoamingProtocol())) return false;
            }
            if (hasPreferred() != other.hasPreferred()) return false;
            if (hasPreferred()) {
                if (getPreferred()
                        != other.getPreferred()) return false;
            }
            if (!unknownFields.equals(other.unknownFields)) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasCarrier()) {
                hash = (37 * hash) + CARRIER_FIELD_NUMBER;
                hash = (53 * hash) + getCarrier().hashCode();
            }
            if (hasMcc()) {
                hash = (37 * hash) + MCC_FIELD_NUMBER;
                hash = (53 * hash) + getMcc().hashCode();
            }
            if (hasMnc()) {
                hash = (37 * hash) + MNC_FIELD_NUMBER;
                hash = (53 * hash) + getMnc().hashCode();
            }
            if (hasApn()) {
                hash = (37 * hash) + APN_FIELD_NUMBER;
                hash = (53 * hash) + getApn().hashCode();
            }
            if (hasUser()) {
                hash = (37 * hash) + USER_FIELD_NUMBER;
                hash = (53 * hash) + getUser().hashCode();
            }
            if (hasServer()) {
                hash = (37 * hash) + SERVER_FIELD_NUMBER;
                hash = (53 * hash) + getServer().hashCode();
            }
            if (hasPassword()) {
                hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
                hash = (53 * hash) + getPassword().hashCode();
            }
            if (hasProxy()) {
                hash = (37 * hash) + PROXY_FIELD_NUMBER;
                hash = (53 * hash) + getProxy().hashCode();
            }
            if (hasPort()) {
                hash = (37 * hash) + PORT_FIELD_NUMBER;
                hash = (53 * hash) + getPort().hashCode();
            }
            if (hasAuthtype()) {
                hash = (37 * hash) + AUTHTYPE_FIELD_NUMBER;
                hash = (53 * hash) + getAuthtype();
            }
            if (hasType()) {
                hash = (37 * hash) + TYPE_FIELD_NUMBER;
                hash = (53 * hash) + getType().hashCode();
            }
            if (hasProtocol()) {
                hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
                hash = (53 * hash) + getProtocol().hashCode();
            }
            if (hasRoamingProtocol()) {
                hash = (37 * hash) + ROAMING_PROTOCOL_FIELD_NUMBER;
                hash = (53 * hash) + getRoamingProtocol().hashCode();
            }
            if (hasPreferred()) {
                hash = (37 * hash) + PREFERRED_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getPreferred());
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Apn parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Apn parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Apn parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Apn parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Apn parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Apn parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Apn parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Apn parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Apn parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Apn parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Apn parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Apn parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Apn prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * option optimize_for = LITE_RUNTIME;
         * </pre>
         * <p>
         * Protobuf type {@code Apn}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Apn)
                ApnOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Common.internal_static_Apn_descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Common.internal_static_Apn_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Apn.class, Builder.class);
            }

            // Construct using Common.Apn.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                carrier_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                mcc_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                mnc_ = "";
                bitField0_ = (bitField0_ & ~0x00000004);
                apn_ = "";
                bitField0_ = (bitField0_ & ~0x00000008);
                user_ = "";
                bitField0_ = (bitField0_ & ~0x00000010);
                server_ = "";
                bitField0_ = (bitField0_ & ~0x00000020);
                password_ = "";
                bitField0_ = (bitField0_ & ~0x00000040);
                proxy_ = "";
                bitField0_ = (bitField0_ & ~0x00000080);
                port_ = "";
                bitField0_ = (bitField0_ & ~0x00000100);
                authtype_ = 0;
                bitField0_ = (bitField0_ & ~0x00000200);
                type_ = "";
                bitField0_ = (bitField0_ & ~0x00000400);
                protocol_ = "";
                bitField0_ = (bitField0_ & ~0x00000800);
                roamingProtocol_ = "";
                bitField0_ = (bitField0_ & ~0x00001000);
                preferred_ = false;
                bitField0_ = (bitField0_ & ~0x00002000);
                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Common.internal_static_Apn_descriptor;
            }

            @Override
            public Apn getDefaultInstanceForType() {
                return Apn.getDefaultInstance();
            }

            @Override
            public Apn build() {
                Apn result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public Apn buildPartial() {
                Apn result = new Apn(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) != 0)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.carrier_ = carrier_;
                if (((from_bitField0_ & 0x00000002) != 0)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.mcc_ = mcc_;
                if (((from_bitField0_ & 0x00000004) != 0)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.mnc_ = mnc_;
                if (((from_bitField0_ & 0x00000008) != 0)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.apn_ = apn_;
                if (((from_bitField0_ & 0x00000010) != 0)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.user_ = user_;
                if (((from_bitField0_ & 0x00000020) != 0)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.server_ = server_;
                if (((from_bitField0_ & 0x00000040) != 0)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.password_ = password_;
                if (((from_bitField0_ & 0x00000080) != 0)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.proxy_ = proxy_;
                if (((from_bitField0_ & 0x00000100) != 0)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.port_ = port_;
                if (((from_bitField0_ & 0x00000200) != 0)) {
                    result.authtype_ = authtype_;
                    to_bitField0_ |= 0x00000200;
                }
                if (((from_bitField0_ & 0x00000400) != 0)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.type_ = type_;
                if (((from_bitField0_ & 0x00000800) != 0)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.protocol_ = protocol_;
                if (((from_bitField0_ & 0x00001000) != 0)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.roamingProtocol_ = roamingProtocol_;
                if (((from_bitField0_ & 0x00002000) != 0)) {
                    result.preferred_ = preferred_;
                    to_bitField0_ |= 0x00002000;
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Apn) {
                    return mergeFrom((Apn) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Apn other) {
                if (other == Apn.getDefaultInstance()) return this;
                if (other.hasCarrier()) {
                    bitField0_ |= 0x00000001;
                    carrier_ = other.carrier_;
                    onChanged();
                }
                if (other.hasMcc()) {
                    bitField0_ |= 0x00000002;
                    mcc_ = other.mcc_;
                    onChanged();
                }
                if (other.hasMnc()) {
                    bitField0_ |= 0x00000004;
                    mnc_ = other.mnc_;
                    onChanged();
                }
                if (other.hasApn()) {
                    bitField0_ |= 0x00000008;
                    apn_ = other.apn_;
                    onChanged();
                }
                if (other.hasUser()) {
                    bitField0_ |= 0x00000010;
                    user_ = other.user_;
                    onChanged();
                }
                if (other.hasServer()) {
                    bitField0_ |= 0x00000020;
                    server_ = other.server_;
                    onChanged();
                }
                if (other.hasPassword()) {
                    bitField0_ |= 0x00000040;
                    password_ = other.password_;
                    onChanged();
                }
                if (other.hasProxy()) {
                    bitField0_ |= 0x00000080;
                    proxy_ = other.proxy_;
                    onChanged();
                }
                if (other.hasPort()) {
                    bitField0_ |= 0x00000100;
                    port_ = other.port_;
                    onChanged();
                }
                if (other.hasAuthtype()) {
                    setAuthtype(other.getAuthtype());
                }
                if (other.hasType()) {
                    bitField0_ |= 0x00000400;
                    type_ = other.type_;
                    onChanged();
                }
                if (other.hasProtocol()) {
                    bitField0_ |= 0x00000800;
                    protocol_ = other.protocol_;
                    onChanged();
                }
                if (other.hasRoamingProtocol()) {
                    bitField0_ |= 0x00001000;
                    roamingProtocol_ = other.roamingProtocol_;
                    onChanged();
                }
                if (other.hasPreferred()) {
                    setPreferred(other.getPreferred());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                if (!hasMcc()) {
                    return false;
                }
                if (!hasMnc()) {
                    return false;
                }
                if (!hasApn()) {
                    return false;
                }
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Apn parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Apn) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private Object carrier_ = "";

            /**
             * <code>optional string carrier = 1;</code>
             */
            public boolean hasCarrier() {
                return ((bitField0_ & 0x00000001) != 0);
            }

            /**
             * <code>optional string carrier = 1;</code>
             */
            public String getCarrier() {
                Object ref = carrier_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        carrier_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string carrier = 1;</code>
             */
            public com.google.protobuf.ByteString
            getCarrierBytes() {
                Object ref = carrier_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    carrier_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string carrier = 1;</code>
             */
            public Builder setCarrier(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                carrier_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string carrier = 1;</code>
             */
            public Builder clearCarrier() {
                bitField0_ = (bitField0_ & ~0x00000001);
                carrier_ = getDefaultInstance().getCarrier();
                onChanged();
                return this;
            }

            /**
             * <code>optional string carrier = 1;</code>
             */
            public Builder setCarrierBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                carrier_ = value;
                onChanged();
                return this;
            }

            private Object mcc_ = "";

            /**
             * <code>required string mcc = 2;</code>
             */
            public boolean hasMcc() {
                return ((bitField0_ & 0x00000002) != 0);
            }

            /**
             * <code>required string mcc = 2;</code>
             */
            public String getMcc() {
                Object ref = mcc_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        mcc_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string mcc = 2;</code>
             */
            public com.google.protobuf.ByteString
            getMccBytes() {
                Object ref = mcc_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    mcc_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string mcc = 2;</code>
             */
            public Builder setMcc(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                mcc_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string mcc = 2;</code>
             */
            public Builder clearMcc() {
                bitField0_ = (bitField0_ & ~0x00000002);
                mcc_ = getDefaultInstance().getMcc();
                onChanged();
                return this;
            }

            /**
             * <code>required string mcc = 2;</code>
             */
            public Builder setMccBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                mcc_ = value;
                onChanged();
                return this;
            }

            private Object mnc_ = "";

            /**
             * <code>required string mnc = 3;</code>
             */
            public boolean hasMnc() {
                return ((bitField0_ & 0x00000004) != 0);
            }

            /**
             * <code>required string mnc = 3;</code>
             */
            public String getMnc() {
                Object ref = mnc_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        mnc_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string mnc = 3;</code>
             */
            public com.google.protobuf.ByteString
            getMncBytes() {
                Object ref = mnc_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    mnc_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string mnc = 3;</code>
             */
            public Builder setMnc(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                mnc_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string mnc = 3;</code>
             */
            public Builder clearMnc() {
                bitField0_ = (bitField0_ & ~0x00000004);
                mnc_ = getDefaultInstance().getMnc();
                onChanged();
                return this;
            }

            /**
             * <code>required string mnc = 3;</code>
             */
            public Builder setMncBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                mnc_ = value;
                onChanged();
                return this;
            }

            private Object apn_ = "";

            /**
             * <code>required string apn = 4;</code>
             */
            public boolean hasApn() {
                return ((bitField0_ & 0x00000008) != 0);
            }

            /**
             * <code>required string apn = 4;</code>
             */
            public String getApn() {
                Object ref = apn_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        apn_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string apn = 4;</code>
             */
            public com.google.protobuf.ByteString
            getApnBytes() {
                Object ref = apn_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    apn_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string apn = 4;</code>
             */
            public Builder setApn(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                apn_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string apn = 4;</code>
             */
            public Builder clearApn() {
                bitField0_ = (bitField0_ & ~0x00000008);
                apn_ = getDefaultInstance().getApn();
                onChanged();
                return this;
            }

            /**
             * <code>required string apn = 4;</code>
             */
            public Builder setApnBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                apn_ = value;
                onChanged();
                return this;
            }

            private Object user_ = "";

            /**
             * <code>optional string user = 5;</code>
             */
            public boolean hasUser() {
                return ((bitField0_ & 0x00000010) != 0);
            }

            /**
             * <code>optional string user = 5;</code>
             */
            public String getUser() {
                Object ref = user_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        user_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string user = 5;</code>
             */
            public com.google.protobuf.ByteString
            getUserBytes() {
                Object ref = user_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    user_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string user = 5;</code>
             */
            public Builder setUser(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                user_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string user = 5;</code>
             */
            public Builder clearUser() {
                bitField0_ = (bitField0_ & ~0x00000010);
                user_ = getDefaultInstance().getUser();
                onChanged();
                return this;
            }

            /**
             * <code>optional string user = 5;</code>
             */
            public Builder setUserBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                user_ = value;
                onChanged();
                return this;
            }

            private Object server_ = "";

            /**
             * <code>optional string server = 6;</code>
             */
            public boolean hasServer() {
                return ((bitField0_ & 0x00000020) != 0);
            }

            /**
             * <code>optional string server = 6;</code>
             */
            public String getServer() {
                Object ref = server_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        server_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string server = 6;</code>
             */
            public com.google.protobuf.ByteString
            getServerBytes() {
                Object ref = server_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    server_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string server = 6;</code>
             */
            public Builder setServer(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                server_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string server = 6;</code>
             */
            public Builder clearServer() {
                bitField0_ = (bitField0_ & ~0x00000020);
                server_ = getDefaultInstance().getServer();
                onChanged();
                return this;
            }

            /**
             * <code>optional string server = 6;</code>
             */
            public Builder setServerBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                server_ = value;
                onChanged();
                return this;
            }

            private Object password_ = "";

            /**
             * <code>optional string password = 7;</code>
             */
            public boolean hasPassword() {
                return ((bitField0_ & 0x00000040) != 0);
            }

            /**
             * <code>optional string password = 7;</code>
             */
            public String getPassword() {
                Object ref = password_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        password_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string password = 7;</code>
             */
            public com.google.protobuf.ByteString
            getPasswordBytes() {
                Object ref = password_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    password_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string password = 7;</code>
             */
            public Builder setPassword(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                password_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string password = 7;</code>
             */
            public Builder clearPassword() {
                bitField0_ = (bitField0_ & ~0x00000040);
                password_ = getDefaultInstance().getPassword();
                onChanged();
                return this;
            }

            /**
             * <code>optional string password = 7;</code>
             */
            public Builder setPasswordBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                password_ = value;
                onChanged();
                return this;
            }

            private Object proxy_ = "";

            /**
             * <code>optional string proxy = 8;</code>
             */
            public boolean hasProxy() {
                return ((bitField0_ & 0x00000080) != 0);
            }

            /**
             * <code>optional string proxy = 8;</code>
             */
            public String getProxy() {
                Object ref = proxy_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        proxy_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string proxy = 8;</code>
             */
            public com.google.protobuf.ByteString
            getProxyBytes() {
                Object ref = proxy_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    proxy_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string proxy = 8;</code>
             */
            public Builder setProxy(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000080;
                proxy_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string proxy = 8;</code>
             */
            public Builder clearProxy() {
                bitField0_ = (bitField0_ & ~0x00000080);
                proxy_ = getDefaultInstance().getProxy();
                onChanged();
                return this;
            }

            /**
             * <code>optional string proxy = 8;</code>
             */
            public Builder setProxyBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000080;
                proxy_ = value;
                onChanged();
                return this;
            }

            private Object port_ = "";

            /**
             * <code>optional string port = 9;</code>
             */
            public boolean hasPort() {
                return ((bitField0_ & 0x00000100) != 0);
            }

            /**
             * <code>optional string port = 9;</code>
             */
            public String getPort() {
                Object ref = port_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        port_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string port = 9;</code>
             */
            public com.google.protobuf.ByteString
            getPortBytes() {
                Object ref = port_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    port_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string port = 9;</code>
             */
            public Builder setPort(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000100;
                port_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string port = 9;</code>
             */
            public Builder clearPort() {
                bitField0_ = (bitField0_ & ~0x00000100);
                port_ = getDefaultInstance().getPort();
                onChanged();
                return this;
            }

            /**
             * <code>optional string port = 9;</code>
             */
            public Builder setPortBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000100;
                port_ = value;
                onChanged();
                return this;
            }

            private int authtype_;

            /**
             * <code>optional uint32 authtype = 10;</code>
             */
            public boolean hasAuthtype() {
                return ((bitField0_ & 0x00000200) != 0);
            }

            /**
             * <code>optional uint32 authtype = 10;</code>
             */
            public int getAuthtype() {
                return authtype_;
            }

            /**
             * <code>optional uint32 authtype = 10;</code>
             */
            public Builder setAuthtype(int value) {
                bitField0_ |= 0x00000200;
                authtype_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 authtype = 10;</code>
             */
            public Builder clearAuthtype() {
                bitField0_ = (bitField0_ & ~0x00000200);
                authtype_ = 0;
                onChanged();
                return this;
            }

            private Object type_ = "";

            /**
             * <code>optional string type = 11;</code>
             */
            public boolean hasType() {
                return ((bitField0_ & 0x00000400) != 0);
            }

            /**
             * <code>optional string type = 11;</code>
             */
            public String getType() {
                Object ref = type_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        type_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string type = 11;</code>
             */
            public com.google.protobuf.ByteString
            getTypeBytes() {
                Object ref = type_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    type_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string type = 11;</code>
             */
            public Builder setType(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000400;
                type_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string type = 11;</code>
             */
            public Builder clearType() {
                bitField0_ = (bitField0_ & ~0x00000400);
                type_ = getDefaultInstance().getType();
                onChanged();
                return this;
            }

            /**
             * <code>optional string type = 11;</code>
             */
            public Builder setTypeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000400;
                type_ = value;
                onChanged();
                return this;
            }

            private Object protocol_ = "";

            /**
             * <code>optional string protocol = 12;</code>
             */
            public boolean hasProtocol() {
                return ((bitField0_ & 0x00000800) != 0);
            }

            /**
             * <code>optional string protocol = 12;</code>
             */
            public String getProtocol() {
                Object ref = protocol_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        protocol_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string protocol = 12;</code>
             */
            public com.google.protobuf.ByteString
            getProtocolBytes() {
                Object ref = protocol_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    protocol_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string protocol = 12;</code>
             */
            public Builder setProtocol(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                protocol_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string protocol = 12;</code>
             */
            public Builder clearProtocol() {
                bitField0_ = (bitField0_ & ~0x00000800);
                protocol_ = getDefaultInstance().getProtocol();
                onChanged();
                return this;
            }

            /**
             * <code>optional string protocol = 12;</code>
             */
            public Builder setProtocolBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                protocol_ = value;
                onChanged();
                return this;
            }

            private Object roamingProtocol_ = "";

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public boolean hasRoamingProtocol() {
                return ((bitField0_ & 0x00001000) != 0);
            }

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public String getRoamingProtocol() {
                Object ref = roamingProtocol_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        roamingProtocol_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public com.google.protobuf.ByteString
            getRoamingProtocolBytes() {
                Object ref = roamingProtocol_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    roamingProtocol_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public Builder setRoamingProtocol(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00001000;
                roamingProtocol_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public Builder clearRoamingProtocol() {
                bitField0_ = (bitField0_ & ~0x00001000);
                roamingProtocol_ = getDefaultInstance().getRoamingProtocol();
                onChanged();
                return this;
            }

            /**
             * <code>optional string roaming_protocol = 13;</code>
             */
            public Builder setRoamingProtocolBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00001000;
                roamingProtocol_ = value;
                onChanged();
                return this;
            }

            private boolean preferred_;

            /**
             * <code>optional bool preferred = 14;</code>
             */
            public boolean hasPreferred() {
                return ((bitField0_ & 0x00002000) != 0);
            }

            /**
             * <code>optional bool preferred = 14;</code>
             */
            public boolean getPreferred() {
                return preferred_;
            }

            /**
             * <code>optional bool preferred = 14;</code>
             */
            public Builder setPreferred(boolean value) {
                bitField0_ |= 0x00002000;
                preferred_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bool preferred = 14;</code>
             */
            public Builder clearPreferred() {
                bitField0_ = (bitField0_ & ~0x00002000);
                preferred_ = false;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:Apn)
        }

        // @@protoc_insertion_point(class_scope:Apn)
        private static final Apn DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Apn();
        }

        public static Apn getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        @Deprecated
        public static final com.google.protobuf.Parser<Apn>
                PARSER = new com.google.protobuf.AbstractParser<Apn>() {
            @Override
            public Apn parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Apn(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Apn> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Apn> getParserForType() {
            return PARSER;
        }

        @Override
        public Apn getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_Apn_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_Apn_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\014common.proto\"\351\001\n\003Apn\022\017\n\007carrier\030\001 \001(\t\022" +
                        "\013\n\003mcc\030\002 \002(\t\022\013\n\003mnc\030\003 \002(\t\022\013\n\003apn\030\004 \002(\t\022\014" +
                        "\n\004user\030\005 \001(\t\022\016\n\006server\030\006 \001(\t\022\020\n\010password" +
                        "\030\007 \001(\t\022\r\n\005proxy\030\010 \001(\t\022\014\n\004port\030\t \001(\t\022\020\n\010a" +
                        "uthtype\030\n \001(\r\022\014\n\004type\030\013 \001(\t\022\020\n\010protocol\030" +
                        "\014 \001(\t\022\030\n\020roaming_protocol\030\r \001(\t\022\021\n\tprefe" +
                        "rred\030\016 \001(\010*\354\003\n\013NetworkType\022\030\n\024NETWORK_TY" +
                        "PE_UNKNOWN\020\000\022\025\n\021NETWORK_TYPE_GPRS\020\001\022\025\n\021N" +
                        "ETWORK_TYPE_EDGE\020\002\022\025\n\021NETWORK_TYPE_UMTS\020" +
                        "\003\022\025\n\021NETWORK_TYPE_CDMA\020\004\022\027\n\023NETWORK_TYPE" +
                        "_EVDO_0\020\005\022\027\n\023NETWORK_TYPE_EVDO_A\020\006\022\026\n\022NE" +
                        "TWORK_TYPE_1xRTT\020\007\022\026\n\022NETWORK_TYPE_HSDPA" +
                        "\020\010\022\026\n\022NETWORK_TYPE_HSUPA\020\t\022\025\n\021NETWORK_TY" +
                        "PE_HSPA\020\n\022\025\n\021NETWORK_TYPE_IDEN\020\013\022\027\n\023NETW" +
                        "ORK_TYPE_EVDO_B\020\014\022\024\n\020NETWORK_TYPE_LTE\020\r\022" +
                        "\026\n\022NETWORK_TYPE_EHRPD\020\016\022\026\n\022NETWORK_TYPE_" +
                        "HSPAP\020\017\022\024\n\020NETWORK_TYPE_GSM\020\020\022\031\n\025NETWORK" +
                        "_TYPE_TD_SCDMA\020\021\022\026\n\022NETWORK_TYPE_IWLAN\020\022" +
                        "\022\027\n\023NETWORK_TYPE_LTE_CA\020\023*\235\002\n\rRadioTechT" +
                        "ype\022\017\n\013GW_prefered\020\000\022\014\n\010GSM_only\020\001\022\016\n\nWC" +
                        "DMA_only\020\002\022\013\n\007GW_auto\020\003\022\013\n\007CE_auto\020\004\022\021\n\r" +
                        "CDMA_w_o_EvDo\020\005\022\r\n\tEvDo_only\020\006\022\010\n\004CEGW\020\007" +
                        "\022\013\n\007CDMA_LE\020\010\022\007\n\003GWL\020\t\022\n\n\006Global\020\n\022\007\n\003LT" +
                        "E\020\013\022\006\n\002LW\020\014\022\020\n\014TDSCDMA_only\020\r\022\006\n\002TW\020\016\022\006\n" +
                        "\002LT\020\017\022\006\n\002TG\020\020\022\007\n\003LTG\020\021\022\007\n\003TGW\020\022\022\007\n\003LTW\020\023" +
                        "\022\010\n\004LTGW\020\024\022\t\n\005TCEGW\020\025\022\n\n\006LTCEGW\020\026*\353\007\n\024Si" +
                        "mcardReleaseReason\022\027\n\023NETWORK_SIGNAL_POO" +
                        "R\020\001\022\026\n\022NETWORK_NO_SERVICE\020\002\022\023\n\017NETWORK_N" +
                        "O_DATA\020\003\022&\n\"NETWORK_TECH_SWITCH_TOO_FREQ" +
                        "UENTLY\020\004\022\037\n\033NETWORK_AUTH_TOO_FREQUENTLY\020" +
                        "\005\022\035\n\031NETWORK_DIAGNOSIS_FAILURE\020\006\022\022\n\016BATT" +
                        "_LOW_POWER\020\010\022\030\n\024BATT_HIGH_TEMPRETURE\020\t\022\034" +
                        "\n\030SIMCARD_TRAFFIC_SHORTAGE\020\017\022\"\n\036SIMCARD_" +
                        "ROAMING_AERA_UNSUPPORT\020\020\022\032\n\026SIMCARD_STAT" +
                        "E_ABNORMAL\020\021\022\032\n\026SIMCARD_BINDING_EXPIRE\020\022" +
                        "\022\032\n\026SIMCARD_CHANGE_REQUEST\020\023\022\033\n\027SIMCARD_" +
                        "RECYCLE_REQUEST\020\024\022\034\n\030SIMCARD_SESSION_OVE" +
                        "RTIME\020\025\022\034\n\030SIMCARD_NOT_BEST_MATCHED\020\026\022\027\n" +
                        "\023SIMCARD_LSR_DELETED\020\031\022\016\n\nSYS_UPDATE\020\032\022\016" +
                        "\n\nSYS_REBOOT\020\033\022\020\n\014SYS_SHUTDOWN\020\034\022\020\n\014VSIM" +
                        "_UPGRADE\020\037\022\016\n\nRMT_ACTIVE\020 \022\032\n\026DEVICE_STA" +
                        "TUS_INVALIAD\020(\022\027\n\023DEVICE_OUT_OF_TOUCH\020)\022" +
                        "\031\n\025DEVICE_CERT_NOT_FOUND\020*\022\027\n\023DEVICE_AUT" +
                        "H_FAILURE\020+\022\026\n\022ACCOUNT_LOW_CREDIT\0202\022\031\n\025A" +
                        "BNORMAL_POWER_CUTOFF\020<\022\036\n\032SIMBANK_SIMCAR" +
                        "D_NO_REPONSE\020Q\022\035\n\031SIMBANK_SIMCARD_NOT_FO" +
                        "UND\020R\022\025\n\021SIMBANK_NOT_READY\020S\022\032\n\026SIMBANK_" +
                        "INTERNAL_ERROR\020T\022\033\n\027SIMBANK_SIMCARD_INVA" +
                        "LID\020V\022 \n\034SIMBANK_SIMCARD_AUTH_INVALID\020W\022" +
                        "\030\n\023BACKEND_REQ_TIMEOUT\020\227\001\022\032\n\025BACKEND_NET" +
                        "WORK_ERROR\020\230\001\022\030\n\023BACKEND_QUERY_ERROR\020\231\001"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_Apn_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_Apn_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_Apn_descriptor,
                new String[]{"Carrier", "Mcc", "Mnc", "Apn", "User", "Server", "Password", "Proxy", "Port", "Authtype", "Type", "Protocol", "RoamingProtocol", "Preferred",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
