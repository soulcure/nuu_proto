// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errcode.proto

package com.nuu.proto;

public final class Errcode {
    private Errcode() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * Protobuf enum {@code ErrorCode}
     */
    public enum ErrorCode
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * common
         * </pre>
         *
         * <code>SUCCESS = 0;</code>
         */
        SUCCESS(0),
        /**
         * <pre>
         * need shutdown device with rmt
         * </pre>
         *
         * <code>SHUTDOW_DEVICE = -100;</code>
         */
        SHUTDOW_DEVICE(-100),
        /**
         * <pre>
         * unknow error
         * </pre>
         *
         * <code>UNKONW_ERROR = -10001;</code>
         */
        UNKONW_ERROR(-10001),
        /**
         * <pre>
         * unkonw error and retry again later
         * </pre>
         *
         * <code>UNKONW_ERROR_AND_RETRY = -10002;</code>
         */
        UNKONW_ERROR_AND_RETRY(-10002),
        /**
         * <pre>
         * improper access to IP
         * </pre>
         *
         * <code>IMPROPER_IP_ACCESS = -10003;</code>
         */
        IMPROPER_IP_ACCESS(-10003),
        /**
         * <pre>
         * unsupport encrypt
         * </pre>
         *
         * <code>UNSUPPORTED_ENCRYPTION = -10004;</code>
         */
        UNSUPPORTED_ENCRYPTION(-10004),
        /**
         * <pre>
         * </pre>
         *
         * <code>DATA_EXCEPTION = -10005;</code>
         */
        DATA_EXCEPTION(-10005),
        /**
         * <code>INVALID_MCC = -10007;</code>
         */
        INVALID_MCC(-10007),
        /**
         * <code>UNSUPPORTED_MCC = -10008;</code>
         */
        UNSUPPORTED_MCC(-10008),
        /**
         * <pre>
         * request device change sim card
         * </pre>
         *
         * <code>REQUIRE_CHANGE_SIM_CARD = -10009;</code>
         */
        REQUIRE_CHANGE_SIM_CARD(-10009),
        /**
         * <pre>
         * sim board's status invalid
         * </pre>
         *
         * <code>SIM_BOARD_STATUS_INVALID = -10010;</code>
         */
        SIM_BOARD_STATUS_INVALID(-10010),
        /**
         * <code>DISTRIBUTE_RECORD_NOT_FOUND = -10011;</code>
         */
        DISTRIBUTE_RECORD_NOT_FOUND(-10011),
        /**
         * <code>DISTRIBUTE_RECORD_STATUS_ERROR = -10012;</code>
         */
        DISTRIBUTE_RECORD_STATUS_ERROR(-10012),
        /**
         * <pre>
         * device
         * </pre>
         *
         * <code>INVALID_IMEI = -10100;</code>
         */
        INVALID_IMEI(-10100),
        /**
         * <pre>
         * invalid sn
         * </pre>
         *
         * <code>INVALID_SERIAL_NUMBER = -10101;</code>
         */
        INVALID_SERIAL_NUMBER(-10101),
        /**
         * <pre>
         * invalid device
         * </pre>
         *
         * <code>INVALID_DEVICE = -10102;</code>
         */
        INVALID_DEVICE(-10102),
        /**
         * <pre>
         * device not residual flow
         * </pre>
         *
         * <code>DEVICE_NO_RESIDUAL_DATA = -10103;</code>
         */
        DEVICE_NO_RESIDUAL_DATA(-10103),
        /**
         * <code>DEVICE_DATA_EXPIRED = -10104;</code>
         */
        DEVICE_DATA_EXPIRED(-10104),
        /**
         * <code>DEVICE_SIM_MISMATCH = -10105;</code>
         */
        DEVICE_SIM_MISMATCH(-10105),
        /**
         * <pre>
         * sim card
         * </pre>
         *
         * <code>NO_SIM_CARD = -10200;</code>
         */
        NO_SIM_CARD(-10200),
        /**
         * <code>SIM_CARD_NONEXISTENT = -10201;</code>
         */
        SIM_CARD_NONEXISTENT(-10201),
        /**
         * <code>SIM_CARD_NO_RESPONSE = -10202;</code>
         */
        SIM_CARD_NO_RESPONSE(-10202),
        /**
         * <code>SIM_CARD_NO_ENOUGH_DATA = -10203;</code>
         */
        SIM_CARD_NO_ENOUGH_DATA(-10203),
        /**
         * <code>SIM_CARD_STATUS_INVALID = -10204;</code>
         */
        SIM_CARD_STATUS_INVALID(-10204),
        /**
         * <pre>
         * expired
         * </pre>
         *
         * <code>SIM_CARD_OVERDUE = -10205;</code>
         */
        SIM_CARD_OVERDUE(-10205),
        /**
         * <code>SIM_CARD_AUTHENTICATION_FAILED = -10206;</code>
         */
        SIM_CARD_AUTHENTICATION_FAILED(-10206),
        /**
         * <code>INVALID_AUTHENTICATION_DATA = -10207;</code>
         */
        INVALID_AUTHENTICATION_DATA(-10207),
        /**
         * <code>SIM_TYPE_ERROR = -10208;</code>
         */
        SIM_TYPE_ERROR(-10208),
        /**
         * <code>CHANGE_SIM_CARD = -10209;</code>
         */
        CHANGE_SIM_CARD(-10209),
        /**
         * <pre>
         * ************************traffic report error code***************************
         * </pre>
         *
         * <code>TRAFFIC_SIM_PACKAGE_NOT_FOUND = -10301;</code>
         */
        TRAFFIC_SIM_PACKAGE_NOT_FOUND(-10301),
        /**
         * <code>TRAFFIC_USED_MORE_DATA = -10303;</code>
         */
        TRAFFIC_USED_MORE_DATA(-10303),
        /**
         * <code>TRAFFIC_ERROR_RELSEASE_SIM = -10304;</code>
         */
        TRAFFIC_ERROR_RELSEASE_SIM(-10304),
        /**
         * <pre>
         * ************************sim container board error code***************************
         * </pre>
         *
         * <code>SIM_BOARD_UNKNOWN_ERROR = -11001;</code>
         */
        SIM_BOARD_UNKNOWN_ERROR(-11001),
        /**
         * <code>SIM_BOARD_NOT_IN_WHITE_LIST = -11002;</code>
         */
        SIM_BOARD_NOT_IN_WHITE_LIST(-11002),
        /**
         * <code>SIM_BOARD_ILLEGAL_REQUEST = -11004;</code>
         */
        SIM_BOARD_ILLEGAL_REQUEST(-11004),
        /**
         * <code>SIM_BOARD_NEED_RECONNECT = -11005;</code>
         */
        SIM_BOARD_NEED_RECONNECT(-11005),
        /**
         * <code>SIM_BOARD_CONTAINER_BUSY = -11006;</code>
         */
        SIM_BOARD_CONTAINER_BUSY(-11006),
        /**
         * <code>SIM_BOARD_REQUEST_IP_MISMATCH = -11007;</code>
         */
        SIM_BOARD_REQUEST_IP_MISMATCH(-11007),
        /**
         * <code>SIM_BOARD_IMSI_NOT_EXIST = -11009;</code>
         */
        SIM_BOARD_IMSI_NOT_EXIST(-11009),
        /**
         * <code>SIM_BOARD_INVALID_SIM = -11010;</code>
         */
        SIM_BOARD_INVALID_SIM(-11010),
        /**
         * <code>SIM_BOARD_SIM_STATUS_ERR = -11011;</code>
         */
        SIM_BOARD_SIM_STATUS_ERR(-11011),
        /**
         * <code>SIM_BOARD_SIM_CMD_EXEC_FAILED = -11012;</code>
         */
        SIM_BOARD_SIM_CMD_EXEC_FAILED(-11012),
        /**
         * <code>SIM_BOARD_SIM_CMD_DATA_ERR = -11013;</code>
         */
        SIM_BOARD_SIM_CMD_DATA_ERR(-11013),
        /**
         * <code>SIM_BOARD_IMSI_POS_MISMATCH = -11014;</code>
         */
        SIM_BOARD_IMSI_POS_MISMATCH(-11014),
        /**
         * <code>SIM_BOARD_IMSI_IS_USING = -11015;</code>
         */
        SIM_BOARD_IMSI_IS_USING(-11015),
        ;

        /**
         * <pre>
         * common
         * </pre>
         *
         * <code>SUCCESS = 0;</code>
         */
        public static final int SUCCESS_VALUE = 0;
        /**
         * <pre>
         * need shutdown device with rmt
         * </pre>
         *
         * <code>SHUTDOW_DEVICE = -100;</code>
         */
        public static final int SHUTDOW_DEVICE_VALUE = -100;
        /**
         * <pre>
         * unknow error
         * </pre>
         *
         * <code>UNKONW_ERROR = -10001;</code>
         */
        public static final int UNKONW_ERROR_VALUE = -10001;
        /**
         * <pre>
         * unkonw error and retry again later
         * </pre>
         *
         * <code>UNKONW_ERROR_AND_RETRY = -10002;</code>
         */
        public static final int UNKONW_ERROR_AND_RETRY_VALUE = -10002;
        /**
         * <pre>
         * improper access to IP
         * </pre>
         *
         * <code>IMPROPER_IP_ACCESS = -10003;</code>
         */
        public static final int IMPROPER_IP_ACCESS_VALUE = -10003;
        /**
         * <pre>
         * unsupport encrypt
         * </pre>
         *
         * <code>UNSUPPORTED_ENCRYPTION = -10004;</code>
         */
        public static final int UNSUPPORTED_ENCRYPTION_VALUE = -10004;
        /**
         * <pre>
         * </pre>
         *
         * <code>DATA_EXCEPTION = -10005;</code>
         */
        public static final int DATA_EXCEPTION_VALUE = -10005;
        /**
         * <code>INVALID_MCC = -10007;</code>
         */
        public static final int INVALID_MCC_VALUE = -10007;
        /**
         * <code>UNSUPPORTED_MCC = -10008;</code>
         */
        public static final int UNSUPPORTED_MCC_VALUE = -10008;
        /**
         * <pre>
         * request device change sim card
         * </pre>
         *
         * <code>REQUIRE_CHANGE_SIM_CARD = -10009;</code>
         */
        public static final int REQUIRE_CHANGE_SIM_CARD_VALUE = -10009;
        /**
         * <pre>
         * sim board's status invalid
         * </pre>
         *
         * <code>SIM_BOARD_STATUS_INVALID = -10010;</code>
         */
        public static final int SIM_BOARD_STATUS_INVALID_VALUE = -10010;
        /**
         * <code>DISTRIBUTE_RECORD_NOT_FOUND = -10011;</code>
         */
        public static final int DISTRIBUTE_RECORD_NOT_FOUND_VALUE = -10011;
        /**
         * <code>DISTRIBUTE_RECORD_STATUS_ERROR = -10012;</code>
         */
        public static final int DISTRIBUTE_RECORD_STATUS_ERROR_VALUE = -10012;
        /**
         * <pre>
         * device
         * </pre>
         *
         * <code>INVALID_IMEI = -10100;</code>
         */
        public static final int INVALID_IMEI_VALUE = -10100;
        /**
         * <pre>
         * invalid sn
         * </pre>
         *
         * <code>INVALID_SERIAL_NUMBER = -10101;</code>
         */
        public static final int INVALID_SERIAL_NUMBER_VALUE = -10101;
        /**
         * <pre>
         * invalid device
         * </pre>
         *
         * <code>INVALID_DEVICE = -10102;</code>
         */
        public static final int INVALID_DEVICE_VALUE = -10102;
        /**
         * <pre>
         * device not residual flow
         * </pre>
         *
         * <code>DEVICE_NO_RESIDUAL_DATA = -10103;</code>
         */
        public static final int DEVICE_NO_RESIDUAL_DATA_VALUE = -10103;
        /**
         * <code>DEVICE_DATA_EXPIRED = -10104;</code>
         */
        public static final int DEVICE_DATA_EXPIRED_VALUE = -10104;
        /**
         * <code>DEVICE_SIM_MISMATCH = -10105;</code>
         */
        public static final int DEVICE_SIM_MISMATCH_VALUE = -10105;
        /**
         * <pre>
         * sim card
         * </pre>
         *
         * <code>NO_SIM_CARD = -10200;</code>
         */
        public static final int NO_SIM_CARD_VALUE = -10200;
        /**
         * <code>SIM_CARD_NONEXISTENT = -10201;</code>
         */
        public static final int SIM_CARD_NONEXISTENT_VALUE = -10201;
        /**
         * <code>SIM_CARD_NO_RESPONSE = -10202;</code>
         */
        public static final int SIM_CARD_NO_RESPONSE_VALUE = -10202;
        /**
         * <code>SIM_CARD_NO_ENOUGH_DATA = -10203;</code>
         */
        public static final int SIM_CARD_NO_ENOUGH_DATA_VALUE = -10203;
        /**
         * <code>SIM_CARD_STATUS_INVALID = -10204;</code>
         */
        public static final int SIM_CARD_STATUS_INVALID_VALUE = -10204;
        /**
         * <pre>
         * expired
         * </pre>
         *
         * <code>SIM_CARD_OVERDUE = -10205;</code>
         */
        public static final int SIM_CARD_OVERDUE_VALUE = -10205;
        /**
         * <code>SIM_CARD_AUTHENTICATION_FAILED = -10206;</code>
         */
        public static final int SIM_CARD_AUTHENTICATION_FAILED_VALUE = -10206;
        /**
         * <code>INVALID_AUTHENTICATION_DATA = -10207;</code>
         */
        public static final int INVALID_AUTHENTICATION_DATA_VALUE = -10207;
        /**
         * <code>SIM_TYPE_ERROR = -10208;</code>
         */
        public static final int SIM_TYPE_ERROR_VALUE = -10208;
        /**
         * <code>CHANGE_SIM_CARD = -10209;</code>
         */
        public static final int CHANGE_SIM_CARD_VALUE = -10209;
        /**
         * <pre>
         * ************************traffic report error code***************************
         * </pre>
         *
         * <code>TRAFFIC_SIM_PACKAGE_NOT_FOUND = -10301;</code>
         */
        public static final int TRAFFIC_SIM_PACKAGE_NOT_FOUND_VALUE = -10301;
        /**
         * <code>TRAFFIC_USED_MORE_DATA = -10303;</code>
         */
        public static final int TRAFFIC_USED_MORE_DATA_VALUE = -10303;
        /**
         * <code>TRAFFIC_ERROR_RELSEASE_SIM = -10304;</code>
         */
        public static final int TRAFFIC_ERROR_RELSEASE_SIM_VALUE = -10304;
        /**
         * <pre>
         * ************************sim container board error code***************************
         * </pre>
         *
         * <code>SIM_BOARD_UNKNOWN_ERROR = -11001;</code>
         */
        public static final int SIM_BOARD_UNKNOWN_ERROR_VALUE = -11001;
        /**
         * <code>SIM_BOARD_NOT_IN_WHITE_LIST = -11002;</code>
         */
        public static final int SIM_BOARD_NOT_IN_WHITE_LIST_VALUE = -11002;
        /**
         * <code>SIM_BOARD_ILLEGAL_REQUEST = -11004;</code>
         */
        public static final int SIM_BOARD_ILLEGAL_REQUEST_VALUE = -11004;
        /**
         * <code>SIM_BOARD_NEED_RECONNECT = -11005;</code>
         */
        public static final int SIM_BOARD_NEED_RECONNECT_VALUE = -11005;
        /**
         * <code>SIM_BOARD_CONTAINER_BUSY = -11006;</code>
         */
        public static final int SIM_BOARD_CONTAINER_BUSY_VALUE = -11006;
        /**
         * <code>SIM_BOARD_REQUEST_IP_MISMATCH = -11007;</code>
         */
        public static final int SIM_BOARD_REQUEST_IP_MISMATCH_VALUE = -11007;
        /**
         * <code>SIM_BOARD_IMSI_NOT_EXIST = -11009;</code>
         */
        public static final int SIM_BOARD_IMSI_NOT_EXIST_VALUE = -11009;
        /**
         * <code>SIM_BOARD_INVALID_SIM = -11010;</code>
         */
        public static final int SIM_BOARD_INVALID_SIM_VALUE = -11010;
        /**
         * <code>SIM_BOARD_SIM_STATUS_ERR = -11011;</code>
         */
        public static final int SIM_BOARD_SIM_STATUS_ERR_VALUE = -11011;
        /**
         * <code>SIM_BOARD_SIM_CMD_EXEC_FAILED = -11012;</code>
         */
        public static final int SIM_BOARD_SIM_CMD_EXEC_FAILED_VALUE = -11012;
        /**
         * <code>SIM_BOARD_SIM_CMD_DATA_ERR = -11013;</code>
         */
        public static final int SIM_BOARD_SIM_CMD_DATA_ERR_VALUE = -11013;
        /**
         * <code>SIM_BOARD_IMSI_POS_MISMATCH = -11014;</code>
         */
        public static final int SIM_BOARD_IMSI_POS_MISMATCH_VALUE = -11014;
        /**
         * <code>SIM_BOARD_IMSI_IS_USING = -11015;</code>
         */
        public static final int SIM_BOARD_IMSI_IS_USING_VALUE = -11015;


        public final int getNumber() {
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static ErrorCode valueOf(int value) {
            return forNumber(value);
        }

        public static ErrorCode forNumber(int value) {
            switch (value) {
                case 0:
                    return SUCCESS;
                case -100:
                    return SHUTDOW_DEVICE;
                case -10001:
                    return UNKONW_ERROR;
                case -10002:
                    return UNKONW_ERROR_AND_RETRY;
                case -10003:
                    return IMPROPER_IP_ACCESS;
                case -10004:
                    return UNSUPPORTED_ENCRYPTION;
                case -10005:
                    return DATA_EXCEPTION;
                case -10007:
                    return INVALID_MCC;
                case -10008:
                    return UNSUPPORTED_MCC;
                case -10009:
                    return REQUIRE_CHANGE_SIM_CARD;
                case -10010:
                    return SIM_BOARD_STATUS_INVALID;
                case -10011:
                    return DISTRIBUTE_RECORD_NOT_FOUND;
                case -10012:
                    return DISTRIBUTE_RECORD_STATUS_ERROR;
                case -10100:
                    return INVALID_IMEI;
                case -10101:
                    return INVALID_SERIAL_NUMBER;
                case -10102:
                    return INVALID_DEVICE;
                case -10103:
                    return DEVICE_NO_RESIDUAL_DATA;
                case -10104:
                    return DEVICE_DATA_EXPIRED;
                case -10105:
                    return DEVICE_SIM_MISMATCH;
                case -10200:
                    return NO_SIM_CARD;
                case -10201:
                    return SIM_CARD_NONEXISTENT;
                case -10202:
                    return SIM_CARD_NO_RESPONSE;
                case -10203:
                    return SIM_CARD_NO_ENOUGH_DATA;
                case -10204:
                    return SIM_CARD_STATUS_INVALID;
                case -10205:
                    return SIM_CARD_OVERDUE;
                case -10206:
                    return SIM_CARD_AUTHENTICATION_FAILED;
                case -10207:
                    return INVALID_AUTHENTICATION_DATA;
                case -10208:
                    return SIM_TYPE_ERROR;
                case -10209:
                    return CHANGE_SIM_CARD;
                case -10301:
                    return TRAFFIC_SIM_PACKAGE_NOT_FOUND;
                case -10303:
                    return TRAFFIC_USED_MORE_DATA;
                case -10304:
                    return TRAFFIC_ERROR_RELSEASE_SIM;
                case -11001:
                    return SIM_BOARD_UNKNOWN_ERROR;
                case -11002:
                    return SIM_BOARD_NOT_IN_WHITE_LIST;
                case -11004:
                    return SIM_BOARD_ILLEGAL_REQUEST;
                case -11005:
                    return SIM_BOARD_NEED_RECONNECT;
                case -11006:
                    return SIM_BOARD_CONTAINER_BUSY;
                case -11007:
                    return SIM_BOARD_REQUEST_IP_MISMATCH;
                case -11009:
                    return SIM_BOARD_IMSI_NOT_EXIST;
                case -11010:
                    return SIM_BOARD_INVALID_SIM;
                case -11011:
                    return SIM_BOARD_SIM_STATUS_ERR;
                case -11012:
                    return SIM_BOARD_SIM_CMD_EXEC_FAILED;
                case -11013:
                    return SIM_BOARD_SIM_CMD_DATA_ERR;
                case -11014:
                    return SIM_BOARD_IMSI_POS_MISMATCH;
                case -11015:
                    return SIM_BOARD_IMSI_IS_USING;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                ErrorCode> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
                    public ErrorCode findValueByNumber(int number) {
                        return ErrorCode.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return Errcode.getDescriptor().getEnumTypes().get(0);
        }

        private static final ErrorCode[] VALUES = values();

        public static ErrorCode valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private ErrorCode(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ErrorCode)
    }


    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\rerrcode.proto\022\tCOMMON_PB*\332\014\n\tErrorCode" +
                        "\022\013\n\007SUCCESS\020\000\022\033\n\016SHUTDOW_DEVICE\020\234\377\377\377\377\377\377\377" +
                        "\377\001\022\031\n\014UNKONW_ERROR\020\357\261\377\377\377\377\377\377\377\001\022#\n\026UNKONW_" +
                        "ERROR_AND_RETRY\020\356\261\377\377\377\377\377\377\377\001\022\037\n\022IMPROPER_I" +
                        "P_ACCESS\020\355\261\377\377\377\377\377\377\377\001\022#\n\026UNSUPPORTED_ENCRY" +
                        "PTION\020\354\261\377\377\377\377\377\377\377\001\022\033\n\016DATA_EXCEPTION\020\353\261\377\377\377" +
                        "\377\377\377\377\001\022\030\n\013INVALID_MCC\020\351\261\377\377\377\377\377\377\377\001\022\034\n\017UNSUP" +
                        "PORTED_MCC\020\350\261\377\377\377\377\377\377\377\001\022$\n\027REQUIRE_CHANGE_" +
                        "SIM_CARD\020\347\261\377\377\377\377\377\377\377\001\022%\n\030SIM_BOARD_STATUS_" +
                        "INVALID\020\346\261\377\377\377\377\377\377\377\001\022(\n\033DISTRIBUTE_RECORD_" +
                        "NOT_FOUND\020\345\261\377\377\377\377\377\377\377\001\022+\n\036DISTRIBUTE_RECOR" +
                        "D_STATUS_ERROR\020\344\261\377\377\377\377\377\377\377\001\022\031\n\014INVALID_IME" +
                        "I\020\214\261\377\377\377\377\377\377\377\001\022\"\n\025INVALID_SERIAL_NUMBER\020\213\261" +
                        "\377\377\377\377\377\377\377\001\022\033\n\016INVALID_DEVICE\020\212\261\377\377\377\377\377\377\377\001\022$\n" +
                        "\027DEVICE_NO_RESIDUAL_DATA\020\211\261\377\377\377\377\377\377\377\001\022 \n\023D" +
                        "EVICE_DATA_EXPIRED\020\210\261\377\377\377\377\377\377\377\001\022 \n\023DEVICE_" +
                        "SIM_MISMATCH\020\207\261\377\377\377\377\377\377\377\001\022\030\n\013NO_SIM_CARD\020\250" +
                        "\260\377\377\377\377\377\377\377\001\022!\n\024SIM_CARD_NONEXISTENT\020\247\260\377\377\377\377" +
                        "\377\377\377\001\022!\n\024SIM_CARD_NO_RESPONSE\020\246\260\377\377\377\377\377\377\377\001\022" +
                        "$\n\027SIM_CARD_NO_ENOUGH_DATA\020\245\260\377\377\377\377\377\377\377\001\022$\n" +
                        "\027SIM_CARD_STATUS_INVALID\020\244\260\377\377\377\377\377\377\377\001\022\035\n\020S" +
                        "IM_CARD_OVERDUE\020\243\260\377\377\377\377\377\377\377\001\022+\n\036SIM_CARD_A" +
                        "UTHENTICATION_FAILED\020\242\260\377\377\377\377\377\377\377\001\022(\n\033INVAL" +
                        "ID_AUTHENTICATION_DATA\020\241\260\377\377\377\377\377\377\377\001\022\033\n\016SIM" +
                        "_TYPE_ERROR\020\240\260\377\377\377\377\377\377\377\001\022\034\n\017CHANGE_SIM_CAR" +
                        "D\020\237\260\377\377\377\377\377\377\377\001\022*\n\035TRAFFIC_SIM_PACKAGE_NOT_" +
                        "FOUND\020\303\257\377\377\377\377\377\377\377\001\022#\n\026TRAFFIC_USED_MORE_DA" +
                        "TA\020\301\257\377\377\377\377\377\377\377\001\022\'\n\032TRAFFIC_ERROR_RELSEASE_" +
                        "SIM\020\300\257\377\377\377\377\377\377\377\001\022$\n\027SIM_BOARD_UNKNOWN_ERRO" +
                        "R\020\207\252\377\377\377\377\377\377\377\001\022(\n\033SIM_BOARD_NOT_IN_WHITE_L" +
                        "IST\020\206\252\377\377\377\377\377\377\377\001\022&\n\031SIM_BOARD_ILLEGAL_REQU" +
                        "EST\020\204\252\377\377\377\377\377\377\377\001\022%\n\030SIM_BOARD_NEED_RECONNE" +
                        "CT\020\203\252\377\377\377\377\377\377\377\001\022%\n\030SIM_BOARD_CONTAINER_BUS" +
                        "Y\020\202\252\377\377\377\377\377\377\377\001\022*\n\035SIM_BOARD_REQUEST_IP_MIS" +
                        "MATCH\020\201\252\377\377\377\377\377\377\377\001\022%\n\030SIM_BOARD_IMSI_NOT_E" +
                        "XIST\020\377\251\377\377\377\377\377\377\377\001\022\"\n\025SIM_BOARD_INVALID_SIM" +
                        "\020\376\251\377\377\377\377\377\377\377\001\022%\n\030SIM_BOARD_SIM_STATUS_ERR\020" +
                        "\375\251\377\377\377\377\377\377\377\001\022*\n\035SIM_BOARD_SIM_CMD_EXEC_FAI" +
                        "LED\020\374\251\377\377\377\377\377\377\377\001\022\'\n\032SIM_BOARD_SIM_CMD_DATA" +
                        "_ERR\020\373\251\377\377\377\377\377\377\377\001\022(\n\033SIM_BOARD_IMSI_POS_MI" +
                        "SMATCH\020\372\251\377\377\377\377\377\377\377\001\022$\n\027SIM_BOARD_IMSI_IS_U" +
                        "SING\020\371\251\377\377\377\377\377\377\377\001"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
